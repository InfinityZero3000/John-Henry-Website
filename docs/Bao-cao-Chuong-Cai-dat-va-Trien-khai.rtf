{\rtf1\ansi\ansicpg65001\deff0
{\fonttbl{\f0 Arial;}{\f1 Courier New;}{\f2 Calibri;}}
{\colortbl;\red0\green0\blue0;\red55\green96\blue146;\red79\green129\blue189;}
\paperw11907\paperh16840\margl1440\margr1440\margt1440\margb1440

\fs28\b\cf2 CHƯƠNG: CÀI ĐẶT VÀ TRIỂN KHAI HỆ THỐNG JOHN HENRY FASHION WEB\b0\cf1\par
\pard\sa200  \fs22 Tài liệu này mô tả chi tiết cách cài đặt môi trường phát triển, cấu hình hệ thống, quy trình build, đóng gói và các phương án triển khai (Docker/không Docker), cùng hướng dẫn vận hành cho nền tảng thương mại điện tử John Henry.\par
\par

\fs26\b 1. Mục tiêu và phạm vi\b0\fs22\par
- Chuẩn hoá các bước cài đặt môi trường và cấu hình ứng dụng.\par
- Chuẩn hoá quy trình build và đóng gói.\par
- Đề xuất các phương án triển khai (dev, staging, production).\par
- Hướng dẫn vận hành: logs, giám sát, backup/restore, bảo mật, nâng cấp/rollback.\par
\par

\fs26\b 2. Kiến trúc và thành phần triển khai\b0\fs22\par
- Ứng dụng web: ASP.NET Core 9.0 (MVC + API).\par
- CSDL: PostgreSQL 15.\par
- Cache/Session: Redis.\par
- Xác thực: ASP.NET Identity, Google OAuth, JWT cho API.\par
- Ghi log: Serilog (file rolling theo ngày, thư mục `logs/`).\par
- Đóng gói: Docker multi-stage (SDK để build, Runtime để chạy).\par
- Hỗ trợ tài liệu API: Swagger (chỉ bật ở Development).\par
\par

\fs26\b 3. Yêu cầu hệ thống\b0\fs22\par
- Hệ điều hành: Windows/Linux/macOS (tài liệu ví dụ chạy trên macOS).\par
- .NET SDK: 9.0+.\par
- Docker & Docker Compose (khuyến nghị cho dev và/hoặc prod).\par
- Git.\par
- Công cụ quản trị CSDL (tuỳ chọn): pgAdmin (đi kèm docker-compose), DBeaver…\par
\par

\fs26\b 4. Cấu hình ứng dụng và biến môi trường\b0\fs22\par
Hệ thống sử dụng kết hợp `appsettings.json` và các biến môi trường (ưu tiên).\par
Các biến được đọc trong `Program.cs` bao gồm:\par
\pard\li720\sa120\par
- CSDL PostgreSQL\par
  \pard\li1080\sa60\f1 DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD\f0\par
  Ví dụ connection string hiệu lực: \f1 Host=$DB_HOST;Port=$DB_PORT;Database=$DB_NAME;Username=$DB_USER;Password=$DB_PASSWORD;SSL Mode=Prefer;Trust Server Certificate=true\f0\par
\pard\li720\sa120\par
- Redis\par
  \pard\li1080\sa60\f1 REDIS_CONNECTION\f0\par
\pard\li720\sa120\par
- JWT cho API\par
  \pard\li1080\sa60\f1 JWT_SECRET, JWT_ISSUER, JWT_AUDIENCE, JWT_EXPIRY_HOURS\f0\par
\pard\li720\sa120\par
- Google OAuth\par
  \pard\li1080\sa60\f1 GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET\f0\par
\pard\li720\sa120\par
- Email\par
  \pard\li1080\sa60\f1 EMAIL_HOST, EMAIL_PORT, EMAIL_USE_SSL, EMAIL_USER, EMAIL_PASSWORD, EMAIL_FROM, EMAIL_FROM_NAME, BASE_URL\f0\par
\pard\li720\sa120\par
- Cài đặt Site & Upload\par
  \pard\li1080\sa60\f1 SITE_NAME, CACHE_DURATION_MINUTES, ENABLE_IMAGE_OPTIMIZATION, MAX_IMAGE_WIDTH, IMAGE_QUALITY, MAX_FILE_SIZE, UPLOAD_PATH\f0\par
\pard\li720\sa120\par
- Cổng thanh toán\par
  \pard\li1080\sa60 VNPay: \f1 VNPAY_TMN_CODE, VNPAY_HASH_SECRET, VNPAY_PAYMENT_URL, VNPAY_API_URL, VNPAY_ENABLED, VNPAY_SANDBOX\f0\par
  MoMo: \f1 MOMO_PARTNER_CODE, MOMO_ACCESS_KEY, MOMO_SECRET_KEY, MOMO_API_URL, MOMO_PUBLIC_KEY, MOMO_PRIVATE_KEY, MOMO_ENABLED, MOMO_SANDBOX\f0\par
  Stripe: \f1 STRIPE_PUBLISHABLE_KEY, STRIPE_SECRET_KEY, STRIPE_WEBHOOK_SECRET, STRIPE_ENABLED, STRIPE_SANDBOX\f0\par
\pard\sa200\par
Khuyến nghị: sử dụng file `.env` (không commit) để quản lý giá trị biến môi trường trong dev; trên production dùng secret store (Docker secrets/K8s secrets/KeyVault).\par
\par

\fs26\b 5. Cài đặt và chạy ở môi trường phát triển (Local Dev)\b0\fs22\par
\pard\li720\sa120\par
5.1. Lấy mã nguồn\par
  - Clone repo và chuyển vào thư mục dự án.\par
\par
5.2. Khởi động dịch vụ nền tảng bằng Docker Compose\par
  - Chạy \f1 docker-compose up -d\f0 để bật \b postgres\b0, \b pgadmin\b0, (tuỳ chọn) \b redis\b0 nếu được thêm.\par
  - Kết nối PostgreSQL từ máy: \f1 localhost:5432\f0 (user: \f1 johnhenry_user\f0, db: \f1 johnhenry_db\f0).\par
  - Kết nối trong pgAdmin (container): host dùng \f1 postgres\f0 (tên service).\par
\par
5.3. Cấu hình ứng dụng\par
  - Tạo file `.env` và điền biến môi trường như mục 4.\par
  - Kiểm tra `appsettings.json` để biết cấu hình mặc định (JWT, Email, Payment…).\par
\par
5.4. Khởi tạo và nâng cấp CSDL\par
  - Sử dụng EF Core Migrations (xem `database/MIGRATIONS_GUIDE.md`).\par
  - Lệnh thường dùng: \f1 dotnet ef database update\f0 để apply toàn bộ migrations hiện có.\par
\par
5.5. Chạy ứng dụng\par
  - Khôi phục gói: \f1 dotnet restore\f0\par
  - Chạy: \f1 dotnet run\f0\par
  - Mặc định truy cập: API/Swagger và UI: ví dụ \f1 https://localhost:5001\f0 (xem log chạy để biết cổng chính xác).\par
  - Tài khoản seed mặc định: \f1 admin@johnhenry.com / Admin123!\f0 và \f1 seller@johnhenry.com / Seller123!\f0 (được seed ở \f1 Program.cs\f0).\par
\pard\sa200\par

\fs26\b 6. Quản trị CSDL và dữ liệu\b0\fs22\par
- Quản trị PostgreSQL qua pgAdmin tại \f1 http://localhost:8080\f0 (email: \f1 admin@johnhenry.com\f0 / pass: \f1 admin123\f0).\par
- Dùng EF Core để quản lý schema, \i không\i0 dùng các file init SQL cũ (đã deprecated).\par
- Tài liệu chi tiết xem `database/DATABASE_README.md` và `database/MIGRATIONS_GUIDE.md`.\par
\par

\fs26\b 7. Build và đóng gói Docker\b0\fs22\par
- Dockerfile sử dụng multi-stage: \par
  \pard\li720\sa60 Base: \f1 mcr.microsoft.com/dotnet/aspnet:9.0\f0 (run-time).\par
  \pard\li720\sa60 Build: \f1 mcr.microsoft.com/dotnet/sdk:9.0\f0 (restore/build/publish).\par
  \pard\li720\sa60 Xuất bản self-contained (không kèm app host) vào `/app/publish` và chạy: \f1 dotnet JohnHenryFashionWeb.dll\f0.\par
\pard\sa200\par
Ghi chú: Khi build image, đảm bảo truyền biến môi trường (hoặc dùng file cấu hình khi chạy container) để ứng dụng kết nối được đến PostgreSQL/Redis.\par
\par

\fs26\b 8. Phương án triển khai\b0\fs22\par
\pard\li360\sa120\b 8.1. Docker Compose (đề xuất cho dev/staging)\b0\par
- Bổ sung service cho ứng dụng web vào `docker-compose.yml` (ví dụ minh hoạ):\par
\pard\li720\sa60\f1 version: '3.8'\line services:\line   web:\line     build: .\line     image: johnhenry/web:latest\line     ports:\line       - "5100:80"\line     environment:\line       - ASPNETCORE_ENVIRONMENT=Production\line       - DB_HOST=postgres\line       - DB_PORT=5432\line       - DB_NAME=johnhenry_db\line       - DB_USER=johnhenry_user\line       - DB_PASSWORD=ChangeMe\line       - REDIS_CONNECTION=redis:6379\line       - JWT_SECRET=ChangeMe\line       - JWT_ISSUER=JohnHenryFashion\line       - JWT_AUDIENCE=JohnHenryFashionUsers\line     depends_on:\line       - postgres\line     networks:\line       - johnhenry_network\line\line   redis:\line     image: redis:alpine\line     ports:\line       - "6379:6379"\line     networks:\line       - johnhenry_network\line\line   postgres: ... (như file hiện tại)\line\line networks:\line   johnhenry_network:\line     driver: bridge\f0\par
\pard\li720\sa60 Sau khi cập nhật compose, chạy: \f1 docker-compose up -d --build\f0 và truy cập \f1 http://localhost:5100\f0.\par
\pard\li360\sa200\par
\pard\li360\sa120\b 8.2. Single container (Docker run)\b0\par
- Build image từ Dockerfile và chạy container web, truyền biến môi trường qua cờ \f1 -e\f0 hoặc file \f1 --env-file\f0.\par
- Bật cổng 80/443 của container ra host.\par
\par
\pard\li360\sa120\b 8.3. Không dùng Docker (hosted runtime)\b0\par
- Build/publish: \f1 dotnet publish -c Release\f0\par
- Deploy thư mục publish lên máy chủ (Windows/IIS với ASP.NET Core Hosting Bundle, hoặc Linux + Nginx reverse proxy).\par
- Cấu hình reverse proxy (ví dụ Nginx) để terminate TLS và forward đến Kestrel (http://127.0.0.1:5000).\par
\pard\sa200\par

\fs26\b 9. Cấu hình bảo mật & secrets (production)\b0\fs22\par
- \b Không\b0 commit secrets vào Git (JWT secret, DB password, keys thanh toán).\par
- Sử dụng biến môi trường/secret store: Docker/Kubernetes secrets, cloud secret manager.\par
- Bật HTTPS, HSTS, và security headers (đã cấu hình thêm ở nhánh Production trong `Program.cs`).\par
- Tắt Swagger UI trên production (đã mặc định).\par
- Ràng buộc mật khẩu mạnh, 2FA cho Admin (\f1 Security\f0 section).\par
\par

\fs26\b 10. Vận hành: logs, giám sát, sao lưu\b0\fs22\par
- \b Logs\b0: Serilog ghi về \f1 logs/john-henry-YYYYMMDD.txt\f0. Xem nhanh bằng tail hoặc tích hợp ELK/Cloud Logs nếu cần.\par
- \b Monitoring\b0: Application Insights có sẵn hook (cần cung cấp \f1 ApplicationInsights:ConnectionString\f0).\par
- \b Backup/Restore CSDL\b0: tham khảo `database/DATABASE_README.md` (pg_dump/pg_restore, script backup định kỳ).\par
- \b Health-check\b0: hiện chưa mở endpoint riêng; có thể bổ sung trong tương lai cho CI/CD và load balancer.\par
\par

\fs26\b 11. Nâng cấp, migration và rollback\b0\fs22\par
- Khi thay đổi model, tạo migration mới: \f1 dotnet ef migrations add TenMigration\f0, apply: \f1 dotnet ef database update\f0.\par
- Trước khi nâng cấp production: tạo script idempotent: \f1 dotnet ef migrations script --idempotent\f0, backup CSDL.\par
- Rollback: dùng backup đã chụp (CSDL) và/hoặc chạy script downgrade nếu có; rollback ứng dụng về image/artefact ổn định trước đó.\par
\par

\fs26\b 12. Phụ lục cấu hình nhanh\b0\fs22\par
- \b Cổng dịch vụ mặc định\b0: Web 80/443 trong container; pgAdmin: 8080; PostgreSQL: 5432; Redis: 6379.\par
- \b URL phát triển thường dùng\b0: \f1 https://localhost:5001\f0 (xem log khi chạy).\par
- \b Tài khoản seed\b0: Admin \f1 admin@johnhenry.com / Admin123!\f0; Seller \f1 seller@johnhenry.com / Seller123!\f0.\par
- \b Đường dẫn tĩnh\b0: `wwwroot/` (ảnh, CSS, JS); chú ý caching dài ngày được cấu hình trong `Program.cs`.\par
- \b Lưu ý chữ hoa/thường file ảnh\b0: đã tắt middleware ép lowercase để tránh 404 khi tên file ảnh in HOA (ghi chú trong `Program.cs`).\par
\par
\fs22\i Tài liệu này bám theo trạng thái mã nguồn hiện tại (nhánh main, ngày 24/10/2025). Khi có thay đổi kiến trúc/cấu hình, cần cập nhật lại chương này.\i0\par
}
