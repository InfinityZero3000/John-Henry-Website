@model JohnHenryFashionWeb.ViewModels.UserNotificationsViewModel
@{
    ViewData["Title"] = "Thông báo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid my-4">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3">
            @await Html.PartialAsync("_UserDashboardSidebar")
        </div>

        <!-- Main Content -->
        <div class="col-md-9">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fas fa-bell me-2"></i>
                        Thông báo
                    </h4>
                    @if (Model.Notifications.Any(n => !n.IsRead))
                    {
                        <button type="button" class="btn btn-outline-primary btn-sm" onclick="markAllAsRead()">
                            <i class="fas fa-check-double me-1"></i>
                            Đánh dấu tất cả đã đọc
                        </button>
                    }
                </div>
                <div class="card-body">
                    @if (Model.Notifications.Any())
                    {
                        @foreach (var notification in Model.Notifications)
                        {
                            <div class="notification-item @(!notification.IsRead ? "unread" : "")" data-id="@notification.Id">
                                <div class="d-flex align-items-start">
                                    <div class="notification-icon me-3">
                                        @switch (notification.Type.ToLower())
                                        {
                                            case "order":
                                                <i class="fas fa-shopping-bag text-primary"></i>
                                                break;
                                            case "product":
                                                <i class="fas fa-box text-success"></i>
                                                break;
                                            case "system":
                                                <i class="fas fa-cogs text-warning"></i>
                                                break;
                                            case "welcome":
                                                <i class="fas fa-hand-wave text-info"></i>
                                                break;
                                            default:
                                                <i class="fas fa-bell text-secondary"></i>
                                                break;
                                        }
                                    </div>
                                    <div class="notification-content flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div>
                                                <h6 class="notification-title @(!notification.IsRead ? "fw-bold" : "")">
                                                    @notification.Title
                                                </h6>
                                                <p class="notification-message mb-1">
                                                    @notification.Message
                                                </p>
                                                <small class="text-muted">
                                                    @notification.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                                                </small>
                                            </div>
                                            <div class="notification-actions">
                                                @if (!notification.IsRead)
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-primary" 
                                                            onclick="markAsRead(@notification.Id)">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                }
                                                @if (!string.IsNullOrEmpty(notification.ActionUrl))
                                                {
                                                    <a href="@notification.ActionUrl" class="btn btn-sm btn-outline-secondary">
                                                        <i class="fas fa-external-link-alt"></i>
                                                    </a>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                @if (!notification.IsRead)
                                {
                                    <div class="unread-indicator"></div>
                                }
                            </div>
                            <hr>
                        }

                        <!-- Pagination -->
                        @if (Model.TotalPages > 1)
                        {
                            <nav aria-label="Page navigation">
                                <ul class="pagination justify-content-center">
                                    @if (Model.HasPreviousPage)
                                    {
                                        <li class="page-item">
                                            <a class="page-link" href="@Url.Action("Notifications", new { page = Model.CurrentPage - 1 })">
                                                <i class="fas fa-chevron-left"></i>
                                            </a>
                                        </li>
                                    }

                                    @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                            <a class="page-link" href="@Url.Action("Notifications", new { page = i })">@i</a>
                                        </li>
                                    }

                                    @if (Model.HasNextPage)
                                    {
                                        <li class="page-item">
                                            <a class="page-link" href="@Url.Action("Notifications", new { page = Model.CurrentPage + 1 })">
                                                <i class="fas fa-chevron-right"></i>
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </nav>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-bell-slash fa-4x text-muted mb-3"></i>
                            <h4>Không có thông báo</h4>
                            <p class="text-muted">Bạn chưa có thông báo nào.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .notification-item {
            position: relative;
            padding: 1rem 0;
            transition: background-color 0.2s;
        }

        .notification-item:hover {
            background-color: #f8f9fa;
        }

        .notification-item.unread {
            background-color: #f8f9fa;
            border-left: 4px solid var(--jh-red);
            padding-left: 1.5rem;
        }

        .notification-title {
            margin-bottom: 0.25rem;
        }

        .notification-message {
            color: #666;
            line-height: 1.4;
        }

        .notification-icon {
            font-size: 1.25rem;
            width: 40px;
            text-align: center;
        }

        .unread-indicator {
            position: absolute;
            top: 1rem;
            right: 1rem;
            width: 8px;
            height: 8px;
            background-color: var(--jh-red);
            border-radius: 50%;
        }

        .notification-actions .btn {
            margin-left: 0.25rem;
        }
    </style>
}

@section Scripts {
    <script>
        function markAsRead(notificationId) {
            fetch('@Url.Action("MarkNotificationAsRead", "UserDashboard")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify(notificationId)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const notificationItem = document.querySelector(`[data-id="${notificationId}"]`);
                    if (notificationItem) {
                        notificationItem.classList.remove('unread');
                        const unreadIndicator = notificationItem.querySelector('.unread-indicator');
                        if (unreadIndicator) {
                            unreadIndicator.remove();
                        }
                        const markButton = notificationItem.querySelector('.btn-outline-primary');
                        if (markButton) {
                            markButton.remove();
                        }
                        const title = notificationItem.querySelector('.notification-title');
                        if (title) {
                            title.classList.remove('fw-bold');
                        }
                    }
                }
            })
            .catch(error => {
                console.error('Error marking notification as read:', error);
            });
        }

        function markAllAsRead() {
            fetch('@Url.Action("MarkAllNotificationsAsRead", "UserDashboard")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                }
            })
            .catch(error => {
                console.error('Error marking all notifications as read:', error);
            });
        }
    </script>
}