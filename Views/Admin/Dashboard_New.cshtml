@model JohnHenryFashionWeb.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard Quản trị";
    ViewData["CurrentSection"] = "dashboard";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <style>
        .dashboard-header {
            background: linear-gradient(135deg, #FF4747 0%, #CC3636 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            position: relative;
            overflow: hidden;
        }

        .live-indicator {
            width: 8px;
            height: 8px;
            background: #16a34a;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .dashboard-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
            opacity: 0.3;
        }

        .dashboard-header .content {
            position: relative;
            z-index: 1;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            border: 1px solid #f1f5f9;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: var(--primary-color);
            transform: scaleY(0);
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        }

        .stat-card:hover::before {
            transform: scaleY(1);
        }

        .stat-header {
            display: flex;
            justify-content: between;
            align-items: flex-start;
            margin-bottom: 15px;
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
            margin-bottom: 15px;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 5px;
            line-height: 1;
        }

        .stat-label {
            font-size: 14px;
            color: #64748b;
            font-weight: 500;
            margin-bottom: 10px;
        }

        .stat-change {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 12px;
            font-weight: 600;
        }

        .stat-change.positive {
            color: #16a34a;
        }

        .stat-change.negative {
            color: #dc2626;
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .chart-container {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        }

        .chart-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #f1f5f9;
        }

        .chart-title {
            font-size: 18px;
            font-weight: 600;
            color: #1e293b;
        }

        .chart-controls {
            display: flex;
            gap: 10px;
        }

        .chart-control {
            padding: 6px 12px;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            background: white;
            color: #64748b;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .chart-control:hover,
        .chart-control.active {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .activities-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .activity-item {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 15px 0;
            border-bottom: 1px solid #f1f5f9;
        }

        .activity-item:last-child {
            border-bottom: none;
        }

        .activity-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            color: white;
            flex-shrink: 0;
        }

        .activity-content {
            flex: 1;
        }

        .activity-text {
            font-size: 14px;
            color: #1e293b;
            margin-bottom: 2px;
        }

        .activity-time {
            font-size: 12px;
            color: #64748b;
        }

        .alerts-container {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            margin-bottom: 30px;
        }

        .alert-item {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            border-left: 4px solid;
        }

        .alert-item:last-child {
            margin-bottom: 0;
        }

        .alert-item.warning {
            background: #fef3c7;
            border-color: #f59e0b;
        }

        .alert-item.info {
            background: #dbeafe;
            border-color: #3b82f6;
        }

        .alert-item.success {
            background: #dcfce7;
            border-color: #16a34a;
        }

        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }

        .quick-action {
            background: white;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
            text-decoration: none;
            color: inherit;
        }

        .quick-action:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
            text-decoration: none;
            color: inherit;
        }

        .quick-action-icon {
            width: 50px;
            height: 50px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: white;
            margin: 0 auto 15px;
        }

        .quick-action-title {
            font-size: 14px;
            font-weight: 600;
            color: #1e293b;
        }

        .real-time-indicator {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            font-size: 12px;
            color: #16a34a;
        }

        .real-time-dot {
            width: 8px;
            height: 8px;
            background: #16a34a;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .system-health {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            margin-bottom: 30px;
        }

        .health-score {
            text-align: center;
            margin-bottom: 20px;
        }

        .health-circle {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            position: relative;
            background: conic-gradient(#16a34a 85%, #f1f5f9 85%);
        }

        .health-circle::before {
            content: '';
            width: 70px;
            height: 70px;
            border-radius: 50%;
            background: white;
            position: absolute;
        }

        .health-value {
            font-size: 18px;
            font-weight: 700;
            color: #16a34a;
            position: relative;
            z-index: 1;
        }

        .responsive-table {
            overflow-x: auto;
        }

        .table-modern {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        }

        .table-modern th {
            background: #f8fafc;
            border: none;
            font-weight: 600;
            color: #374151;
            padding: 15px;
        }

        .table-modern td {
            border: none;
            padding: 15px;
            vertical-align: middle;
        }

        .table-modern tbody tr {
            transition: background-color 0.2s ease;
        }

        .table-modern tbody tr:hover {
            background-color: #f8fafc;
        }

        @@media (max-width: 1200px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
        }

        @@media (max-width: 768px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .quick-actions {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
}

<!-- Dashboard Header -->
<div class="dashboard-header">
    <div class="content">
        <div class="d-flex justify-content-between align-items-center">
            <div class="text-end">
                <div class="real-time-indicator mb-2">
                    <div class="real-time-dot"></div>
                    <span>Dữ liệu thời gian thực</span>
                </div>
                <div class="small opacity-75">Cập nhật lần cuối: @DateTime.Now.ToString("HH:mm")</div>
            </div>
        </div>
    </div>
</div>

<!-- Key Metrics -->
<div class="stats-grid">
    <div class="stat-card">
        <div class="stat-icon" style="background: linear-gradient(45deg, #10b981, #16a34a);">
            <i class="fas fa-dollar-sign"></i>
        </div>
        <div class="stat-value">@((Model.DashboardSummary?.TodayRevenue ?? 0).ToString("C0", new System.Globalization.CultureInfo("vi-VN")))</div>
        <div class="stat-label">Doanh thu hôm nay</div>
        <div class="stat-change positive">
            <i class="fas fa-arrow-up"></i>
            <span>+@((Model.DashboardSummary?.RevenueGrowth ?? 0).ToString("F1"))%</span>
            <span class="text-muted">so với hôm qua</span>
        </div>
    </div>

    <div class="stat-card">
        <div class="stat-icon" style="background: linear-gradient(45deg, #3b82f6, #1d4ed8);">
            <i class="fas fa-shopping-cart"></i>
        </div>
        <div class="stat-value">@(Model.DashboardSummary?.TodayOrders ?? 0)</div>
        <div class="stat-label">Đơn hàng hôm nay</div>
        <div class="stat-change positive">
            <i class="fas fa-arrow-up"></i>
            <span>+@((Model.DashboardSummary?.OrdersGrowth ?? 0).ToString("F1"))%</span>
            <span class="text-muted">so với hôm qua</span>
        </div>
    </div>

    <div class="stat-card">
        <div class="stat-icon" style="background: linear-gradient(45deg, #8b5cf6, #7c3aed);">
            <i class="fas fa-users"></i>
        </div>
        <div class="stat-value">@(Model.DashboardSummary?.TodayVisitors ?? 0)</div>
        <div class="stat-label">Khách truy cập</div>
        <div class="stat-change positive">
            <i class="fas fa-arrow-up"></i>
            <span>+@((Model.DashboardSummary?.VisitorsGrowth ?? 0).ToString("F1"))%</span>
            <span class="text-muted">so với hôm qua</span>
        </div>
    </div>

    <div class="stat-card">
        <div class="stat-icon" style="background: linear-gradient(45deg, #f59e0b, #d97706);">
            <i class="fas fa-chart-line"></i>
        </div>
        <div class="stat-value">@((Model.DashboardSummary?.ConversionRate ?? 0).ToString("F1"))%</div>
        <div class="stat-label">Tỷ lệ chuyển đổi</div>
        <div class="stat-change positive">
            <i class="fas fa-arrow-up"></i>
            <span>+@((Model.DashboardSummary?.ConversionGrowth ?? 0).ToString("F1"))%</span>
            <span class="text-muted">so với hôm qua</span>
        </div>
    </div>
</div>

<!-- Quick Actions -->
<div class="quick-actions">
    <a href="@Url.Action("Orders", "Admin")" class="quick-action">
        <div class="quick-action-icon" style="background: linear-gradient(45deg, #3b82f6, #1d4ed8);">
            <i class="fas fa-shopping-cart"></i>
        </div>
        <div class="quick-action-title">Xem đơn hàng</div>
    </a>

    <a href="@Url.Action("Users", "Admin")" class="quick-action">
        <div class="quick-action-icon" style="background: linear-gradient(45deg, #8b5cf6, #7c3aed);">
            <i class="fas fa-users"></i>
        </div>
        <div class="quick-action-title">Quản lý user</div>
    </a>

    <a href="@Url.Action("Reports", "Admin")" class="quick-action">
        <div class="quick-action-icon" style="background: linear-gradient(45deg, #f59e0b, #d97706);">
            <i class="fas fa-chart-bar"></i>
        </div>
        <div class="quick-action-title">Báo cáo</div>
    </a>

    <a href="@Url.Action("Analytics", "Admin")" class="quick-action">
        <div class="quick-action-icon" style="background: linear-gradient(45deg, #ef4444, #dc2626);">
            <i class="fas fa-analytics"></i>
        </div>
        <div class="quick-action-title">Phân tích</div>
    </a>

    <a href="@Url.Action("Settings", "Admin")" class="quick-action">
        <div class="quick-action-icon" style="background: linear-gradient(45deg, #64748b, #475569);">
            <i class="fas fa-cog"></i>
        </div>
        <div class="quick-action-title">Cài đặt</div>
    </a>
</div>

<!-- System Alerts -->
@if (Model.SystemAlerts?.Any() == true)
{
    <div class="alerts-container">
        <h5 class="mb-3"><i class="fas fa-bell me-2"></i>Cảnh báo hệ thống</h5>
        @foreach (var alert in Model.SystemAlerts)
        {
            <div class="alert-item @alert.Type">
                <div style="flex-shrink: 0;">
                    <i class="@alert.Icon" style="font-size: 18px;"></i>
                </div>
                <div>
                    <div style="font-weight: 600;">@alert.Message</div>
                    @if (!string.IsNullOrEmpty(alert.Action))
                    {
                        <a href="@alert.Action" class="small">Xem chi tiết</a>
                    }
                </div>
            </div>
        }
    </div>
}

<!-- Main Dashboard Grid -->
<div class="dashboard-grid">
    <!-- Sales Chart -->
    <div class="chart-container">
        <div class="chart-header">
            <h5 class="chart-title">Doanh thu theo thời gian</h5>
            <div class="chart-controls">
                <button class="chart-control active" data-period="7">7 ngày</button>
                <button class="chart-control" data-period="30">30 ngày</button>
                <button class="chart-control" data-period="90">3 tháng</button>
            </div>
        </div>
        <div style="height: 350px;">
            <canvas id="salesChart" width="100%" height="350"></canvas>
        </div>
    </div>

    <!-- System Health -->
    <div class="system-health">
        <h5 class="mb-3"><i class="fas fa-heartbeat me-2"></i>Sức khỏe hệ thống</h5>
        <div class="health-score">
            <div class="health-circle">
                <div class="health-value">98%</div>
            </div>
            <div class="small text-muted">Hoạt động tốt</div>
        </div>
        
        <div class="row text-center">
            <div class="col-6 mb-3">
                <div class="small text-muted">CPU</div>
                <div class="h6 mb-0">45%</div>
            </div>
            <div class="col-6 mb-3">
                <div class="small text-muted">RAM</div>
                <div class="h6 mb-0">68%</div>
            </div>
            <div class="col-6">
                <div class="small text-muted">Disk</div>
                <div class="h6 mb-0">23%</div>
            </div>
            <div class="col-6">
                <div class="small text-muted">Online</div>
                <div class="h6 mb-0">@(Model.DashboardSummary?.ActiveUsers ?? 0)</div>
            </div>
        </div>
    </div>
</div>

<!-- Recent Activity & Top Products -->
<div class="row">
    <div class="col-lg-6">
        <div class="chart-container">
            <div class="chart-header">
                <h5 class="chart-title">Hoạt động gần đây</h5>
            </div>
            <div class="activities-list">
                @if (Model.RecentOrders?.Any() == true)
                {
                    @foreach (var order in Model.RecentOrders.Take(5))
                    {
                        <div class="activity-item">
                            <div class="activity-icon" style="background: linear-gradient(45deg, #10b981, #16a34a);">
                                <i class="fas fa-shopping-cart"></i>
                            </div>
                            <div class="activity-content">
                                <div class="activity-text">
                                    Đơn hàng mới <strong>#@order.OrderNumber</strong> từ @order.User?.Email
                                </div>
                                <div class="activity-time">@order.CreatedAt.ToString("dd/MM/yyyy HH:mm")</div>
                            </div>
                            <div class="text-end">
                                <span class="badge bg-success">@order.TotalAmount.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</span>
                            </div>
                        </div>
                    }
                }
                @if (Model.RecentUsers?.Any() == true)
                {
                    @foreach (var user in Model.RecentUsers.Take(3))
                    {
                        <div class="activity-item">
                            <div class="activity-icon" style="background: linear-gradient(45deg, #3b82f6, #1d4ed8);">
                                <i class="fas fa-user-plus"></i>
                            </div>
                            <div class="activity-content">
                                <div class="activity-text">
                                    Người dùng mới đăng ký: <strong>@user.Email</strong>
                                </div>
                                <div class="activity-time">@user.CreatedAt.ToString("dd/MM/yyyy HH:mm")</div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Sales Chart
        const ctx = document.getElementById('salesChart').getContext('2d');
        const salesChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: ['T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'CN'],
                datasets: [{
                    label: 'Doanh thu',
                    data: [1200000, 1900000, 3000000, 5000000, 2000000, 3000000, 4500000],
                    borderColor: 'rgb(99, 102, 241)',
                    backgroundColor: 'rgba(99, 102, 241, 0.1)',
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4,
                    pointBackgroundColor: 'rgb(99, 102, 241)',
                    pointBorderColor: 'white',
                    pointBorderWidth: 2,
                    pointRadius: 6
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)'
                        },
                        ticks: {
                            callback: function(value) {
                                return new Intl.NumberFormat('vi-VN', {
                                    style: 'currency',
                                    currency: 'VND',
                                    minimumFractionDigits: 0
                                }).format(value);
                            }
                        }
                    },
                    x: {
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)'
                        }
                    }
                }
            }
        });

        // Chart period controls
        document.querySelectorAll('.chart-control').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.chart-control').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                
                // Update chart data based on period
                const period = this.dataset.period;
                // Here you would typically make an AJAX call to get new data
                console.log('Loading data for period:', period);
            });
        });

        // Auto-refresh dashboard data every 30 seconds
        setInterval(function() {
            // Update real-time metrics
            fetch('/admin/api/dashboard/metrics')
                .then(response => response.json())
                .then(data => {
                    // Update UI with new data
                    console.log('Dashboard data refreshed');
                })
                .catch(error => console.error('Error refreshing dashboard:', error));
        }, 30000);

        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    </script>
}