@model JohnHenryFashionWeb.ViewModels.ProductListViewModel
@{
    ViewData["Title"] = "Quản lý sản phẩm";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="admin-content">
    <!-- Header Section -->
    <div class="admin-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="h3 mb-0">
                    <i class="fas fa-box me-2"></i>Quản lý sản phẩm
                </h1>
                <p class="text-muted mb-0">Quản lý toàn bộ sản phẩm trong hệ thống</p>
            </div>
            <div class="header-actions">
                <button class="btn btn-outline-primary me-2" data-bs-toggle="modal" data-bs-target="#importModal">
                    <i class="fas fa-upload me-1"></i>Import
                </button>
                <button class="btn btn-outline-secondary me-2" onclick="exportProducts()">
                    <i class="fas fa-download me-1"></i>Export
                </button>
                <a href="@Url.Action("CreateProduct", "Admin")" class="btn btn-primary">
                    <i class="fas fa-plus me-1"></i>Thêm sản phẩm
                </a>
            </div>
        </div>
    </div>

    <!-- Alert Messages -->
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["Warning"] != null)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @TempData["Warning"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6">
            <div class="card stats-card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title mb-1">Tổng sản phẩm</h6>
                            <h3 class="mb-0" id="totalProducts">@Model.Products.Count()</h3>
                        </div>
                        <div class="stats-icon">
                            <i class="fas fa-boxes"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card stats-card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title mb-1">Đang bán</h6>
                            <h3 class="mb-0" id="activeProducts">@Model.Products.Count(p => p.IsActive)</h3>
                        </div>
                        <div class="stats-icon">
                            <i class="fas fa-check-circle"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card stats-card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title mb-1">Hết hàng</h6>
                            <h3 class="mb-0" id="outOfStock">@Model.Products.Count(p => p.StockQuantity <= 0)</h3>
                        </div>
                        <div class="stats-icon">
                            <i class="fas fa-exclamation-triangle"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-md-6">
            <div class="card stats-card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h6 class="card-title mb-1">Sắp hết</h6>
                            <h3 class="mb-0" id="lowStock">@Model.Products.Count(p => p.StockQuantity > 0 && p.StockQuantity <= 10)</h3>
                        </div>
                        <div class="stats-icon">
                            <i class="fas fa-chart-line"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="card mb-4">
        <div class="card-header">
            <h6 class="mb-0">
                <i class="fas fa-filter me-2"></i>Bộ lọc và tìm kiếm
            </h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <label class="form-label">Tìm kiếm</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" class="form-control" id="searchInput" placeholder="Tên sản phẩm, SKU...">
                    </div>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Danh mục</label>
                    <select class="form-select" id="categoryFilter">
                        <option value="">Tất cả</option>
                        <option value="1">Áo</option>
                        <option value="2">Quần</option>
                        <option value="3">Phụ kiện</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Trạng thái</label>
                    <select class="form-select" id="statusFilter">
                        <option value="">Tất cả</option>
                        <option value="active">Đang bán</option>
                        <option value="inactive">Ngừng bán</option>
                        <option value="outOfStock">Hết hàng</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Giá từ</label>
                    <input type="number" class="form-control" id="priceFrom" placeholder="0">
                </div>
                <div class="col-md-2">
                    <label class="form-label">Giá đến</label>
                    <input type="number" class="form-control" id="priceTo" placeholder="999999">
                </div>
                <div class="col-md-1 d-flex align-items-end">
                    <button class="btn btn-outline-secondary w-100" onclick="clearFilters()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bulk Actions -->
    <div class="card mb-4 bulk-actions-card" style="display: none;">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <span class="selected-count">0</span> sản phẩm được chọn
                </div>
                <div class="bulk-actions">
                    <button class="btn btn-sm btn-success me-2" onclick="bulkActivate()">
                        <i class="fas fa-eye me-1"></i>Kích hoạt
                    </button>
                    <button class="btn btn-sm btn-warning me-2" onclick="bulkDeactivate()">
                        <i class="fas fa-eye-slash me-1"></i>Tạm ẩn
                    </button>
                    <button class="btn btn-sm btn-info me-2" onclick="bulkUpdateCategory()">
                        <i class="fas fa-tags me-1"></i>Đổi danh mục
                    </button>
                    <button class="btn btn-sm btn-secondary me-2" onclick="bulkUpdatePrice()">
                        <i class="fas fa-dollar-sign me-1"></i>Cập nhật giá
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="bulkDelete()">
                        <i class="fas fa-trash me-1"></i>Xóa
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Products Table -->
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h6 class="mb-0">
                    <i class="fas fa-list me-2"></i>Danh sách sản phẩm
                </h6>
                <div class="table-controls">
                    <label class="form-label me-2">Hiển thị:</label>
                    <select class="form-select form-select-sm d-inline-block w-auto" id="pageSize">
                        <option value="10">10</option>
                        <option value="25" selected>25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="productsTable">
                    <thead class="table-light">
                        <tr>
                            <th width="50">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="selectAll">
                                </div>
                            </th>
                            <th width="80">Hình ảnh</th>
                            <th>Sản phẩm</th>
                            <th width="100">SKU</th>
                            <th width="120">Danh mục</th>
                            <th width="100">Giá</th>
                            <th width="80">Tồn kho</th>
                            <th width="100">Trạng thái</th>
                            <th width="120">Ngày tạo</th>
                            <th width="120">Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Model.Products)
                        {
                            <tr data-product-id="@product.Id">
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input product-checkbox" type="checkbox" value="@product.Id">
                                    </div>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(product.FeaturedImageUrl))
                                    {
                                        <img src="@product.FeaturedImageUrl" alt="@product.Name" class="product-thumbnail" style="width: 50px; height: 50px; object-fit: cover; border-radius: 8px;">
                                    }
                                    else
                                    {
                                        <div class="product-thumbnail-placeholder" style="width: 50px; height: 50px; background: #f8f9fa; border-radius: 8px; display: flex; align-items: center; justify-content: center;">
                                            <i class="fas fa-image text-muted"></i>
                                        </div>
                                    }
                                </td>
                                <td>
                                    <div>
                                        <div class="fw-bold">@product.Name</div>
                                        @if (!string.IsNullOrEmpty(product.Description))
                                        {
                                            <small class="text-muted">@(product.Description.Length > 50 ? product.Description.Substring(0, 50) + "..." : product.Description)</small>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <code class="text-primary">@product.SKU</code>
                                </td>
                                <td>
                                    <span class="badge bg-light text-dark">@product.Category?.Name</span>
                                </td>
                                <td>
                                    <div class="fw-bold text-success">@product.Price.ToString("N0") ₫</div>
                                    @if (product.SalePrice.HasValue && product.SalePrice > 0 && product.SalePrice < product.Price)
                                    {
                                        <small class="text-muted text-decoration-line-through">@product.Price.ToString("N0") ₫</small>
                                    }
                                </td>
                                <td>
                                    @if (product.StockQuantity <= 0)
                                    {
                                        <span class="badge bg-danger">Hết hàng</span>
                                    }
                                    else if (product.StockQuantity <= 10)
                                    {
                                        <span class="badge bg-warning">@product.StockQuantity</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">@product.StockQuantity</span>
                                    }
                                </td>
                                <td>
                                    @if (product.IsActive)
                                    {
                                        <span class="badge bg-success">
                                            <i class="fas fa-eye me-1"></i>Đang bán
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">
                                            <i class="fas fa-eye-slash me-1"></i>Tạm ẩn
                                        </span>
                                    }
                                </td>
                                <td>
                                    <small class="text-muted">@product.CreatedAt.ToString("dd/MM/yyyy")</small>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a href="@Url.Action("EditProduct", "Admin", new { id = product.Id })" class="btn btn-sm btn-outline-primary" title="Chỉnh sửa">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button class="btn btn-sm btn-outline-info" onclick="viewProduct('@product.Id')" title="Xem chi tiết">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" onclick="deleteProduct('@product.Id')" title="Xóa">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="card-footer">
            <div class="d-flex justify-content-between align-items-center">
                <small class="text-muted">
                    Hiển thị <span id="showingFrom">1</span> đến <span id="showingTo">@Math.Min(25, Model.Products.Count())</span> 
                    trong tổng số <span id="totalRecords">@Model.Products.Count()</span> sản phẩm
                </small>
                <nav>
                    <ul class="pagination pagination-sm mb-0" id="pagination">
                        <!-- Pagination will be generated by JavaScript -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Import Modal -->
<div class="modal fade" id="importModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-upload me-2"></i>Import sản phẩm
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="importForm" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label class="form-label">Chọn file Excel (.xlsx)</label>
                        <input type="file" class="form-control" id="importFile" accept=".xlsx,.xls" required>
                        <div class="form-text">
                            File phải có định dạng .xlsx hoặc .xls
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="updateExisting">
                            <label class="form-check-label" for="updateExisting">
                                Cập nhật sản phẩm đã tồn tại
                            </label>
                        </div>
                    </div>
                    <div class="alert alert-info">
                        <h6>Định dạng file:</h6>
                        <small>
                            Cột 1: Tên sản phẩm<br>
                            Cột 2: SKU<br>
                            Cột 3: Giá<br>
                            Cột 4: Tồn kho<br>
                            Cột 5: Danh mục<br>
                            Cột 6: Mô tả
                        </small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" onclick="importProducts()">
                    <i class="fas fa-upload me-1"></i>Import
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Product Detail Modal -->
<div class="modal fade" id="productDetailModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-info-circle me-2"></i>Chi tiết sản phẩm
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="productDetailContent">
                <!-- Content will be loaded dynamically -->
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    initializeProductManagement();
});

function initializeProductManagement() {
    // Initialize search and filters
    const searchInput = document.getElementById('searchInput');
    const categoryFilter = document.getElementById('categoryFilter');
    const statusFilter = document.getElementById('statusFilter');
    const priceFrom = document.getElementById('priceFrom');
    const priceTo = document.getElementById('priceTo');
    
    // Add event listeners for real-time filtering
    searchInput.addEventListener('input', debounce(filterProducts, 300));
    categoryFilter.addEventListener('change', filterProducts);
    statusFilter.addEventListener('change', filterProducts);
    priceFrom.addEventListener('input', debounce(filterProducts, 500));
    priceTo.addEventListener('input', debounce(filterProducts, 500));
    
    // Initialize bulk selection
    initializeBulkSelection();
    
    // Initialize pagination
    initializePagination();
}

function filterProducts() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const categoryFilter = document.getElementById('categoryFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;
    const priceFrom = parseFloat(document.getElementById('priceFrom').value) || 0;
    const priceTo = parseFloat(document.getElementById('priceTo').value) || Infinity;
    
    const rows = document.querySelectorAll('#productsTable tbody tr');
    let visibleCount = 0;
    
    rows.forEach(row => {
        const productName = row.querySelector('td:nth-child(3) .fw-bold').textContent.toLowerCase();
        const sku = row.querySelector('code').textContent.toLowerCase();
        const category = row.querySelector('td:nth-child(5) .badge').textContent;
        const priceText = row.querySelector('td:nth-child(6) .fw-bold').textContent;
        const price = parseFloat(priceText.replace(/[^\d]/g, ''));
        const status = row.querySelector('td:nth-child(8) .badge').textContent;
        
        let visible = true;
        
        // Search filter
        if (searchTerm && !productName.includes(searchTerm) && !sku.includes(searchTerm)) {
            visible = false;
        }
        
        // Category filter
        if (categoryFilter && !category.includes(categoryFilter)) {
            visible = false;
        }
        
        // Status filter
        if (statusFilter) {
            if (statusFilter === 'active' && !status.includes('Đang bán')) visible = false;
            if (statusFilter === 'inactive' && !status.includes('Tạm ẩn')) visible = false;
            if (statusFilter === 'outOfStock' && !status.includes('Hết hàng')) visible = false;
        }
        
        // Price filter
        if (price < priceFrom || price > priceTo) {
            visible = false;
        }
        
        row.style.display = visible ? '' : 'none';
        if (visible) visibleCount++;
    });
    
    updatePagination(visibleCount);
}

function clearFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('categoryFilter').value = '';
    document.getElementById('statusFilter').value = '';
    document.getElementById('priceFrom').value = '';
    document.getElementById('priceTo').value = '';
    filterProducts();
}

function initializeBulkSelection() {
    const selectAll = document.getElementById('selectAll');
    const bulkActionsCard = document.querySelector('.bulk-actions-card');
    const selectedCountSpan = document.querySelector('.selected-count');
    
    selectAll.addEventListener('change', function() {
        const checkboxes = document.querySelectorAll('.product-checkbox');
        checkboxes.forEach(cb => {
            const row = cb.closest('tr');
            if (row.style.display !== 'none') {
                cb.checked = this.checked;
            }
        });
        updateBulkActions();
    });
    
    document.addEventListener('change', function(e) {
        if (e.target.classList.contains('product-checkbox')) {
            updateBulkActions();
        }
    });
    
    function updateBulkActions() {
        const checkedBoxes = document.querySelectorAll('.product-checkbox:checked');
        const count = checkedBoxes.length;
        
        selectedCountSpan.textContent = count;
        bulkActionsCard.style.display = count > 0 ? 'block' : 'none';
        
        // Update select all checkbox state
        const allVisible = document.querySelectorAll('.product-checkbox');
        const allVisibleChecked = Array.from(allVisible).every(cb => {
            const row = cb.closest('tr');
            return row.style.display === 'none' || cb.checked;
        });
        
        selectAll.indeterminate = count > 0 && !allVisibleChecked;
        selectAll.checked = count > 0 && allVisibleChecked;
    }
}

function bulkActivate() {
    const selectedIds = getSelectedProductIds();
    if (selectedIds.length === 0) return;
    
    if (confirm(`Bạn có chắc muốn kích hoạt ${selectedIds.length} sản phẩm?`)) {
        console.log('Bulk activate:', selectedIds);
        showToast('Đã kích hoạt ' + selectedIds.length + ' sản phẩm', 'success');
    }
}

function bulkDeactivate() {
    const selectedIds = getSelectedProductIds();
    if (selectedIds.length === 0) return;
    
    if (confirm(`Bạn có chắc muốn tạm ẩn ${selectedIds.length} sản phẩm?`)) {
        console.log('Bulk deactivate:', selectedIds);
        showToast('Đã tạm ẩn ' + selectedIds.length + ' sản phẩm', 'warning');
    }
}

function bulkUpdateCategory() {
    const selectedIds = getSelectedProductIds();
    if (selectedIds.length === 0) return;
    
    const category = prompt('Nhập ID danh mục mới:');
    if (category) {
        console.log('Bulk update category:', selectedIds, category);
        showToast('Đã cập nhật danh mục cho ' + selectedIds.length + ' sản phẩm', 'info');
    }
}

function bulkUpdatePrice() {
    const selectedIds = getSelectedProductIds();
    if (selectedIds.length === 0) return;
    
    const action = prompt('Chọn hành động:\n1. Tăng giá theo %\n2. Giảm giá theo %\n3. Đặt giá cố định\nNhập số (1-3):');
    if (action) {
        const value = prompt('Nhập giá trị:');
        if (value) {
            console.log('Bulk update price:', selectedIds, action, value);
            showToast('Đã cập nhật giá cho ' + selectedIds.length + ' sản phẩm', 'info');
        }
    }
}

function bulkDelete() {
    const selectedIds = getSelectedProductIds();
    if (selectedIds.length === 0) return;
    
    if (confirm(`CẢNH BÁO: Bạn có chắc muốn xóa ${selectedIds.length} sản phẩm? Hành động này không thể hoàn tác!`)) {
        console.log('Bulk delete:', selectedIds);
        showToast('Đã xóa ' + selectedIds.length + ' sản phẩm', 'danger');
    }
}

function getSelectedProductIds() {
    const checkboxes = document.querySelectorAll('.product-checkbox:checked');
    return Array.from(checkboxes).map(cb => cb.value);
}

function viewProduct(id) {
    // Mock data for demo
    const mockData = {
        name: 'Sản phẩm demo',
        sku: 'DEMO-001',
        price: 500000,
        stockQuantity: 10,
        categoryName: 'Áo',
        description: 'Mô tả sản phẩm demo',
        isActive: true,
        featuredImageUrl: '/images/no-image.png'
    };
    
    document.getElementById('productDetailContent').innerHTML = `
        <div class="row">
            <div class="col-md-4">
                <img src="${mockData.featuredImageUrl || '/images/no-image.png'}" class="img-fluid rounded" alt="${mockData.name}">
            </div>
            <div class="col-md-8">
                <h5>${mockData.name}</h5>
                <p><strong>SKU:</strong> ${mockData.sku}</p>
                <p><strong>Giá:</strong> ${mockData.price.toLocaleString()} ₫</p>
                <p><strong>Tồn kho:</strong> ${mockData.stockQuantity}</p>
                <p><strong>Danh mục:</strong> ${mockData.categoryName}</p>
                <p><strong>Mô tả:</strong> ${mockData.description}</p>
                <p><strong>Trạng thái:</strong> ${mockData.isActive ? 'Đang bán' : 'Tạm ẩn'}</p>
            </div>
        </div>
    `;
    new bootstrap.Modal(document.getElementById('productDetailModal')).show();
}

function deleteProduct(id) {
    // Redirect to confirmation page instead of direct deletion
    window.location.href = `/Admin/products/delete/${id}`;
}

function exportProducts() {
    const selectedIds = getSelectedProductIds();
    const url = selectedIds.length > 0 
        ? `/Admin/ExportProducts?ids=${selectedIds.join(',')}`
        : '/Admin/ExportProducts';
    
    console.log('Export products:', url);
    showToast('Đang xuất file...', 'info');
}

function importProducts() {
    const form = document.getElementById('importForm');
    const formData = new FormData(form);
    
    console.log('Import products:', formData);
    showToast('Import thành công!', 'success');
    
    bootstrap.Modal.getInstance(document.getElementById('importModal')).hide();
}

function initializePagination() {
    const pageSize = parseInt(document.getElementById('pageSize').value);
    const totalItems = document.querySelectorAll('#productsTable tbody tr').length;
    updatePagination(totalItems);
}

function updatePagination(totalItems) {
    const pageSize = parseInt(document.getElementById('pageSize').value);
    const totalPages = Math.ceil(totalItems / pageSize);
    
    document.getElementById('totalRecords').textContent = totalItems;
    document.getElementById('showingTo').textContent = Math.min(pageSize, totalItems);
    
    const pagination = document.getElementById('pagination');
    pagination.innerHTML = '';
    
    if (totalPages > 1) {
        for (let i = 1; i <= Math.min(5, totalPages); i++) {
            const li = document.createElement('li');
            li.className = `page-item ${i === 1 ? 'active' : ''}`;
            li.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
            pagination.appendChild(li);
        }
    }
}

function changePage(page) {
    const pageSize = parseInt(document.getElementById('pageSize').value);
    const rows = document.querySelectorAll('#productsTable tbody tr');
    
    rows.forEach((row, index) => {
        const shouldShow = Math.floor(index / pageSize) + 1 === page;
        row.style.display = shouldShow ? '' : 'none';
    });
    
    document.querySelectorAll('.page-item').forEach(item => item.classList.remove('active'));
    document.querySelector(`.page-item:nth-child(${page})`).classList.add('active');
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    toast.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
        if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
        }
    }, 5000);
}
</script>

<style>
.stats-card {
    border: none;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    transition: transform 0.2s;
}

.stats-card:hover {
    transform: translateY(-2px);
}

.stats-icon {
    font-size: 2rem;
    opacity: 0.8;
}

.product-thumbnail {
    border: 2px solid #e9ecef;
}

.bulk-actions-card {
    border-left: 4px solid #007bff;
    background: linear-gradient(135deg, #f8f9ff 0%, #e3f2fd 100%);
}

.table th {
    border-top: none;
    font-weight: 600;
    background: #f8f9fa !important;
}

.table td {
    vertical-align: middle;
}

.btn-group .btn {
    border-radius: 6px !important;
    margin: 0 1px;
}

.pagination .page-link {
    border-radius: 8px;
    margin: 0 2px;
    border: 1px solid #dee2e6;
}

.pagination .page-item.active .page-link {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-color: #667eea;
}

.modal-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
}

.modal-header .btn-close {
    filter: invert(1);
}

.admin-header {
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    margin-bottom: 1.5rem;
}

.header-actions .btn {
    border-radius: 8px;
    padding: 0.5rem 1rem;
}
</style>