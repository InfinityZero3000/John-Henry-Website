@model JohnHenryFashionWeb.ViewModels.UserOrdersViewModel
@{
    ViewData["Title"] = "Đơn hàng của tôi";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid my-4">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3">
            @await Html.PartialAsync("_UserDashboardSidebar")
        </div>

        <!-- Main Content -->
        <div class="col-md-9">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fas fa-shopping-bag me-2"></i>
                        Đơn hàng của tôi
                    </h4>
                    <span class="badge bg-primary">@Model.TotalOrders đơn hàng</span>
                </div>
                <div class="card-body">
                    @if (Model.Orders.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Mã đơn hàng</th>
                                        <th>Ngày đặt</th>
                                        <th>Sản phẩm</th>
                                        <th>Trạng thái</th>
                                        <th>Tổng tiền</th>
                                        <th>Thao tác</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var order in Model.Orders)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@order.OrderNumber</strong>
                                            </td>
                                            <td>@order.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                            <td>
                                                <div>
                                                    @if (order.OrderItems.Count == 1)
                                                    {
                                                        var item = order.OrderItems.First();
                                                        <span>@item.Product.Name</span>
                                                        @if (item.Quantity > 1)
                                                        {
                                                            <small class="text-muted">(x@item.Quantity)</small>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <span>@order.OrderItems.Count sản phẩm</span>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                @switch (order.Status.ToLower())
                                                {
                                                    case "pending":
                                                        <span class="badge bg-warning">Chờ xử lý</span>
                                                        break;
                                                    case "processing":
                                                        <span class="badge bg-info">Đang xử lý</span>
                                                        break;
                                                    case "shipped":
                                                        <span class="badge bg-primary">Đã gửi</span>
                                                        break;
                                                    case "delivered":
                                                        <span class="badge bg-success">Đã giao</span>
                                                        break;
                                                    case "cancelled":
                                                        <span class="badge bg-danger">Đã hủy</span>
                                                        break;
                                                    case "completed":
                                                        <span class="badge bg-success">Hoàn thành</span>
                                                        break;
                                                    default:
                                                        <span class="badge bg-secondary">@order.Status</span>
                                                        break;
                                                }
                                            </td>
                                            <td>
                                                <strong>@order.TotalAmount.ToString("N0") ₫</strong>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <a href="@Url.Action("OrderDetails", "UserDashboard", new { id = order.Id })" 
                                                       class="btn btn-outline-primary btn-sm">
                                                        <i class="fas fa-eye"></i> Chi tiết
                                                    </a>
                                                    @if (order.Status.ToLower() == "delivered" || order.Status.ToLower() == "completed")
                                                    {
                                                        <button type="button" class="btn btn-outline-success btn-sm" 
                                                                onclick="requestReorder('@order.Id')">
                                                            <i class="fas fa-redo"></i> Đặt lại
                                                        </button>
                                                    }
                                                    @if (order.Status.ToLower() == "pending")
                                                    {
                                                        <button type="button" class="btn btn-outline-danger btn-sm" 
                                                                onclick="cancelOrder('@order.Id')">
                                                            <i class="fas fa-times"></i> Hủy
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (Model.TotalPages > 1)
                        {
                            <nav aria-label="Page navigation">
                                <ul class="pagination justify-content-center">
                                    @if (Model.HasPreviousPage)
                                    {
                                        <li class="page-item">
                                            <a class="page-link" href="@Url.Action("Orders", new { page = Model.CurrentPage - 1 })">
                                                <i class="fas fa-chevron-left"></i>
                                            </a>
                                        </li>
                                    }

                                    @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                            <a class="page-link" href="@Url.Action("Orders", new { page = i })">@i</a>
                                        </li>
                                    }

                                    @if (Model.HasNextPage)
                                    {
                                        <li class="page-item">
                                            <a class="page-link" href="@Url.Action("Orders", new { page = Model.CurrentPage + 1 })">
                                                <i class="fas fa-chevron-right"></i>
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </nav>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-shopping-bag fa-4x text-muted mb-3"></i>
                            <h4>Chưa có đơn hàng nào</h4>
                            <p class="text-muted">Bạn chưa có đơn hàng nào. Hãy bắt đầu mua sắm ngay!</p>
                            <a href="@Url.Action("Index", "Products")" class="btn btn-primary">
                                <i class="fas fa-shopping-cart me-2"></i>
                                Bắt đầu mua sắm
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function cancelOrder(orderId) {
            if (confirm('Bạn có chắc chắn muốn hủy đơn hàng này?')) {
                fetch('@Url.Action("CancelOrder", "UserDashboard")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({ orderId: orderId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Có lỗi xảy ra khi hủy đơn hàng: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Có lỗi xảy ra khi hủy đơn hàng');
                });
            }
        }

        function requestReorder(orderId) {
            if (confirm('Bạn có muốn đặt lại đơn hàng này?')) {
                fetch('@Url.Action("Reorder", "UserDashboard")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({ orderId: orderId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.href = '@Url.Action("Index", "Cart")';
                    } else {
                        alert('Có lỗi xảy ra khi đặt lại đơn hàng: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Có lỗi xảy ra khi đặt lại đơn hàng');
                });
            }
        }
    </script>
}