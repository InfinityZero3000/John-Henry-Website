@using JohnHenryFashionWeb.Controllers
@using JohnHenryFashionWeb.Services
@model PerformanceDashboardViewModel
@{
    ViewData["Title"] = "Performance Dashboard";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center">
                <h2><i class="fas fa-tachometer-alt"></i> Performance Dashboard</h2>
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" id="refreshBtn">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                    <button type="button" class="btn btn-outline-danger" id="clearCacheBtn">
                        <i class="fas fa-trash"></i> Clear Cache
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- System Health Status -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h4><i class="fas fa-heartbeat"></i> System Health Status</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-2">
                            <div class="text-center">
                                <div class="health-indicator health-@Model.SystemHealth.OverallStatus.ToString().ToLower()">
                                    <i class="fas fa-circle"></i>
                                </div>
                                <h5>Overall</h5>
                                <span class="badge badge-@GetHealthBadgeClass(Model.SystemHealth.OverallStatus)">
                                    @Model.SystemHealth.OverallStatus
                                </span>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="text-center">
                                <div class="health-indicator health-@Model.SystemHealth.MemoryStatus.ToString().ToLower()">
                                    <i class="fas fa-memory"></i>
                                </div>
                                <h6>Memory</h6>
                                <span class="badge badge-@GetHealthBadgeClass(Model.SystemHealth.MemoryStatus)">
                                    @Model.SystemHealth.MemoryStatus
                                </span>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="text-center">
                                <div class="health-indicator health-@Model.SystemHealth.CpuStatus.ToString().ToLower()">
                                    <i class="fas fa-microchip"></i>
                                </div>
                                <h6>CPU</h6>
                                <span class="badge badge-@GetHealthBadgeClass(Model.SystemHealth.CpuStatus)">
                                    @Model.SystemHealth.CpuStatus
                                </span>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="text-center">
                                <div class="health-indicator health-@Model.SystemHealth.DatabaseStatus.ToString().ToLower()">
                                    <i class="fas fa-database"></i>
                                </div>
                                <h6>Database</h6>
                                <span class="badge badge-@GetHealthBadgeClass(Model.SystemHealth.DatabaseStatus)">
                                    @Model.SystemHealth.DatabaseStatus
                                </span>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="text-center">
                                <div class="health-indicator health-@Model.SystemHealth.CacheStatus.ToString().ToLower()">
                                    <i class="fas fa-layer-group"></i>
                                </div>
                                <h6>Cache</h6>
                                <span class="badge badge-@GetHealthBadgeClass(Model.SystemHealth.CacheStatus)">
                                    @Model.SystemHealth.CacheStatus
                                </span>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="text-center">
                                <div class="health-indicator health-@Model.SystemHealth.ResponseTimeStatus.ToString().ToLower()">
                                    <i class="fas fa-clock"></i>
                                </div>
                                <h6>Response</h6>
                                <span class="badge badge-@GetHealthBadgeClass(Model.SystemHealth.ResponseTimeStatus)">
                                    @Model.SystemHealth.ResponseTimeStatus
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Performance Metrics -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4>@Model.CurrentMetrics.MemoryUsageMB MB</h4>
                            <p class="mb-0">Memory Usage</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-memory fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4>@Model.CurrentMetrics.CpuUsagePercent.ToString("F1")%</h4>
                            <p class="mb-0">CPU Usage</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-microchip fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4>@Model.CurrentMetrics.RequestsPerSecond.ToString("F1")</h4>
                            <p class="mb-0">Requests/sec</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-chart-line fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4>@Model.CurrentMetrics.AverageResponseTime.TotalMilliseconds.ToString("F0")ms</h4>
                            <p class="mb-0">Avg Response</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-clock fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-area"></i> Memory Usage (24h)</h5>
                </div>
                <div class="card-body">
                    <canvas id="memoryChart" height="200"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-line"></i> Response Time (24h)</h5>
                </div>
                <div class="card-body">
                    <canvas id="responseChart" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Cache Management -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-layer-group"></i> Cache Management</h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="stat-item">
                                <h4>@Model.CacheEntryCount</h4>
                                <p class="text-muted">Cache Entries</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="stat-item">
                                <h4>@Model.CurrentMetrics.CacheHitRate.ToString("P1")</h4>
                                <p class="text-muted">Hit Rate</p>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="input-group mb-3">
                                <input type="text" class="form-control" id="cachePattern" placeholder="Enter cache pattern (e.g., product_*)">
                                <div class="input-group-append">
                                    <button class="btn btn-outline-warning" type="button" id="clearPatternBtn">
                                        Clear Pattern
                                    </button>
                                </div>
                            </div>
                            <button type="button" class="btn btn-info btn-sm" id="viewCacheKeysBtn">
                                <i class="fas fa-eye"></i> View Cache Keys
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-pie"></i> Site Statistics</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="stat-item">
                                <h4>@Model.SiteStatistics.TotalProducts</h4>
                                <p class="text-muted">Products</p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="stat-item">
                                <h4>@Model.SiteStatistics.TotalUsers</h4>
                                <p class="text-muted">Users</p>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="stat-item">
                                <h4>@Model.SiteStatistics.TotalOrders</h4>
                                <p class="text-muted">Orders</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="stat-item">
                                <h4>@Model.SiteStatistics.TotalRevenue.ToString("C0")</h4>
                                <p class="text-muted">Revenue</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="stat-item">
                                <h4>@Model.SiteStatistics.AverageOrderValue.ToString("C0")</h4>
                                <p class="text-muted">Avg Order</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-tools"></i> Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="btn-group" role="group">
                        <a href="/admin/performance/database-report" class="btn btn-outline-primary">
                            <i class="fas fa-database"></i> Database Report
                        </a>
                        <a href="/admin/performance/page-report" class="btn btn-outline-info">
                            <i class="fas fa-file-alt"></i> Page Performance
                        </a>
                        <button type="button" class="btn btn-outline-success" id="optimizeBtn">
                            <i class="fas fa-magic"></i> Optimize System
                        </button>
                        <button type="button" class="btn btn-outline-warning" id="generateReportBtn">
                            <i class="fas fa-file-download"></i> Export Report
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Cache Keys Modal -->
<div class="modal fade" id="cacheKeysModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cache Keys</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="table-responsive" style="max-height: 400px;">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Cache Key</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="cacheKeysTable">
                            <!-- Dynamic content -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetHealthBadgeClass(HealthStatus status)
    {
        return status switch
        {
            HealthStatus.Healthy => "success",
            HealthStatus.Warning => "warning",
            HealthStatus.Critical => "danger",
            _ => "secondary"
        };
    }
}

<style>
    .health-indicator {
        font-size: 2rem;
        margin-bottom: 10px;
    }
    
    .health-healthy { color: #28a745; }
    .health-warning { color: #ffc107; }
    .health-critical { color: #dc3545; }
    
    .stat-item {
        text-align: center;
        margin-bottom: 20px;
    }
    
    .stat-item h4 {
        margin-bottom: 5px;
        font-weight: bold;
    }
    
    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: 1px solid rgba(0, 0, 0, 0.125);
    }
</style>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Performance Dashboard JavaScript
        let memoryChart, responseChart;
        
        $(document).ready(function() {
            initializeCharts();
            bindEvents();
            
            // Auto-refresh every 30 seconds
            setInterval(refreshData, 30000);
        });
        
        function initializeCharts() {
            // Memory Chart
            const memoryCtx = document.getElementById('memoryChart').getContext('2d');
            memoryChart = new Chart(memoryCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Memory Usage (MB)',
                        borderColor: '#007bff',
                        backgroundColor: 'rgba(0, 123, 255, 0.1)',
                        data: []
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            
            // Response Time Chart
            const responseCtx = document.getElementById('responseChart').getContext('2d');
            responseChart = new Chart(responseCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Response Time (ms)',
                        borderColor: '#28a745',
                        backgroundColor: 'rgba(40, 167, 69, 0.1)',
                        data: []
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            
            // Load initial chart data
            loadChartData();
        }
        
        function loadChartData() {
            // Load memory data
            $.get('/admin/performance/api/performance-chart-data?type=memory')
                .done(function(data) {
                    memoryChart.data.labels = data.map(d => new Date(d.timestamp).toLocaleTimeString());
                    memoryChart.data.datasets[0].data = data.map(d => d.value);
                    memoryChart.update();
                });
                
            // Load response time data
            $.get('/admin/performance/api/performance-chart-data?type=response_time')
                .done(function(data) {
                    responseChart.data.labels = data.map(d => new Date(d.timestamp).toLocaleTimeString());
                    responseChart.data.datasets[0].data = data.map(d => d.value);
                    responseChart.update();
                });
        }
        
        function bindEvents() {
            $('#refreshBtn').click(function() {
                location.reload();
            });
            
            $('#clearCacheBtn').click(function() {
                if (confirm('Are you sure you want to clear all cache?')) {
                    $.post('/admin/performance/clear-cache')
                        .done(function(response) {
                            if (response.success) {
                                toastr.success(response.message);
                                setTimeout(() => location.reload(), 1000);
                            } else {
                                toastr.error(response.message);
                            }
                        })
                        .fail(function() {
                            toastr.error('Failed to clear cache');
                        });
                }
            });
            
            $('#clearPatternBtn').click(function() {
                const pattern = $('#cachePattern').val();
                if (!pattern) {
                    toastr.warning('Please enter a cache pattern');
                    return;
                }
                
                if (confirm(`Clear all cache keys matching pattern: ${pattern}?`)) {
                    $.post('/admin/performance/clear-cache-pattern', { pattern })
                        .done(function(response) {
                            if (response.success) {
                                toastr.success(response.message);
                                $('#cachePattern').val('');
                            } else {
                                toastr.error(response.message);
                            }
                        })
                        .fail(function() {
                            toastr.error('Failed to clear cache pattern');
                        });
                }
            });
            
            $('#viewCacheKeysBtn').click(function() {
                loadCacheKeys();
            });
        }
        
        function loadCacheKeys() {
            $.get('/admin/performance/cache-keys')
                .done(function(keys) {
                    const tbody = $('#cacheKeysTable');
                    tbody.empty();
                    
                    keys.forEach(key => {
                        tbody.append(`
                            <tr>
                                <td><code>${key}</code></td>
                                <td>
                                    <button class="btn btn-sm btn-outline-danger" onclick="clearSingleKey('${key}')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        `);
                    });
                    
                    $('#cacheKeysModal').modal('show');
                })
                .fail(function() {
                    toastr.error('Failed to load cache keys');
                });
        }
        
        function clearSingleKey(key) {
            if (confirm(`Clear cache key: ${key}?`)) {
                $.post('/admin/performance/clear-cache-pattern', { pattern: key })
                    .done(function(response) {
                        if (response.success) {
                            toastr.success(`Cleared: ${key}`);
                            loadCacheKeys(); // Refresh the list
                        } else {
                            toastr.error(response.message);
                        }
                    });
            }
        }
        
        function refreshData() {
            // Refresh metrics without full page reload
            $.get('/admin/performance/metrics')
                .done(function(metrics) {
                    // Update metric displays
                    // This would update the metric cards
                })
                .fail(function() {
                    console.error('Failed to refresh metrics');
                });
        }
    </script>
}
