@model List<JohnHenryFashionWeb.Models.ShoppingCartItem>
@{
    ViewData["Title"] = "Giỏ hàng của bạn";
    var cartTotal = ViewBag.CartTotal as decimal? ?? 0;
    var cartCount = ViewBag.CartCount as int? ?? 0;
}

@Html.AntiForgeryToken()

<div class="container py-4">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Trang chủ</a></li>
            <li class="breadcrumb-item active">Giỏ hàng</li>
        </ol>
    </nav>

    <div class="row">
        <div class="col-lg-8">
            <!-- Cart Header -->
            <div class="cart-header mb-4">
                <h2 class="cart-title d-flex align-items-center">
                    @if (cartCount > 0)
                    {
                        <input type="checkbox" id="select-all-items" class="form-check-input me-3" style="transform: scale(1.2);">
                    }
                    Giỏ hàng của bạn
                </h2>
                @if (cartCount > 0)
                {
                    <p class="text-muted mb-0">
                        <span id="selected-count">0</span>/<span>@cartCount</span> sản phẩm được chọn
                    </p>
                }
            </div>

            @if (Model.Any())
            {
                <!-- Cart Items -->
                <div class="cart-items">
                    @foreach (var item in Model)
                    {
                        <div class="cart-item" data-cart-item-id="@item.Id">
                            <div class="row align-items-center">
                                <!-- Checkbox column -->
                                <div class="col-auto ps-0">
                                    <input type="checkbox" 
                                           class="form-check-input item-checkbox" 
                                           data-cart-item-id="@item.Id"
                                           data-price="@(item.Price * item.Quantity)"
                                           style="transform: scale(1.2);">
                                </div>
                                
                                <!-- Product Image -->
                                <div class="col-md-2 col-3">
                                    <div class="product-image">
                                        <img src="@(!string.IsNullOrEmpty(item.Product.FeaturedImageUrl) ? item.Product.FeaturedImageUrl : "~/images/placeholder-product.jpg")" 
                                             alt="@item.Product.Name" 
                                             class="img-fluid rounded"
                                             onerror="this.src='/images/placeholder-product.jpg'">
                                    </div>
                                </div>

                                <!-- Product Info -->
                                <div class="col-md-4 col-9">
                                    <div class="product-info">
                                        <h6 class="product-name">
                                            <a href="/Products/Details/@item.Product.Id" class="text-decoration-none">
                                                @item.Product.Name
                                            </a>
                                        </h6>
                                        <div class="product-details">
                                            @if (!string.IsNullOrEmpty(item.Size))
                                            {
                                                <span class="badge bg-light text-dark me-1">Size: @item.Size</span>
                                            }
                                            @if (!string.IsNullOrEmpty(item.Color))
                                            {
                                                <span class="badge bg-light text-dark">Color: @item.Color</span>
                                            }
                                        </div>
                                        <small class="text-muted">SKU: @item.Product.SKU</small>
                                    </div>
                                </div>

                                <!-- Price -->
                                <div class="col-md-2 col-6">
                                    <div class="item-price">
                                        <span class="price">@item.Price.ToString("N0")₫</span>
                                    </div>
                                </div>

                                <!-- Quantity & Delete -->
                                <div class="col-md-3 col-12">
                                    <div class="quantity-actions-wrapper">
                                        <div class="quantity-controls">
                                            <button class="btn btn-outline-secondary btn-sm" 
                                                    onclick="updateQuantity('@item.Id', @(item.Quantity - 1))"
                                                    @(item.Quantity <= 1 ? "disabled" : "")>
                                                <i data-lucide="minus"></i>
                                            </button>
                                            <input type="number" 
                                                   class="form-control quantity-input" 
                                                   value="@item.Quantity" 
                                                   min="1" 
                                                   max="99"
                                                   onchange="updateQuantity('@item.Id', this.value)">
                                            <button class="btn btn-outline-secondary btn-sm" 
                                                    onclick="updateQuantity('@item.Id', @(item.Quantity + 1))">
                                                <i data-lucide="plus"></i>
                                            </button>
                                            <button class="btn btn-outline-danger btn-sm ms-2" 
                                                    onclick="removeItem('@item.Id')"
                                                    title="Xóa sản phẩm">
                                                <i data-lucide="trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <hr class="cart-divider">
                        </div>
                    }
                </div>

                <!-- Cart Actions -->
                <div class="cart-actions mt-4">
                    <div class="row">
                        <div class="col-md-6">
                            <a href="/" class="btn btn-outline-primary">
                                <i data-lucide="arrow-left" class="me-2"></i>Tiếp tục mua sắm
                            </a>
                        </div>
                        <div class="col-md-6 text-end">
                            <button class="btn btn-outline-secondary me-2" onclick="clearCart()">
                                <i data-lucide="trash" class="me-2"></i>Xóa tất cả
                            </button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <!-- Empty Cart -->
                <div class="empty-cart text-center py-5">
                    <div class="empty-cart-icon mb-4">
                        <i data-lucide="shopping-cart" class="w-16 h-16 text-muted"></i>
                    </div>
                    <h4 class="mb-3">Giỏ hàng của bạn đang trống</h4>
                    <p class="text-muted mb-4">Hãy khám phá các sản phẩm tuyệt vời của chúng tôi!</p>
                    <a href="/" class="btn btn-primary">
                        <i data-lucide="shopping-bag" class="me-2"></i>Bắt đầu mua sắm
                    </a>
                </div>
            }
        </div>

        @if (Model.Any())
        {
            <!-- Cart Summary -->
            <div class="col-lg-4">
                <div class="cart-summary">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Tóm tắt đơn hàng</h5>
                        </div>
                        <div class="card-body">
                            <div class="summary-row">
                                <span>Tạm tính (<span id="summary-count">0</span> sản phẩm):</span>
                                <span class="cart-subtotal">0₫</span>
                            </div>
                            <div class="summary-row">
                                <span>Phí vận chuyển:</span>
                                <span class="shipping-fee">30.000₫</span>
                            </div>
                            
                            <!-- Coupon Section -->
                            <div class="coupon-section mt-3">
                                <div class="input-group">
                                    <input type="text" id="couponCode" class="form-control" placeholder="Nhập mã giảm giá">
                                    <button class="btn btn-outline-secondary" type="button" onclick="applyCoupon()">
                                        Áp dụng
                                    </button>
                                </div>
                                <div id="couponMessage" class="mt-2"></div>
                                <div id="appliedCoupon" class="applied-coupon mt-2" style="display: none;">
                                    <div class="alert alert-success d-flex justify-content-between align-items-center">
                                        <div>
                                            <i data-lucide="check-circle" class="me-2"></i>
                                            <span id="couponInfo"></span>
                                        </div>
                                        <button type="button" class="btn-close" onclick="removeCoupon()"></button>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Discount Row -->
                            <div class="summary-row discount-row" id="discountRow" style="display: none;">
                                <span>Giảm giá:</span>
                                <span class="discount-amount text-success">-0₫</span>
                            </div>
                            
                            <hr>
                            <div class="summary-row total-row">
                                <strong>
                                    <span>Tổng cộng:</span>
                                    <span class="cart-total">30.000₫</span>
                                </strong>
                            </div>

                            <!-- Checkout Button -->
                            <div class="mt-4">
                                <a href="#" id="checkout-btn" class="btn btn-primary btn-lg w-100 disabled" aria-disabled="true">
                                    <i data-lucide="credit-card" class="me-2"></i>Thanh toán
                                </a>
                            </div>
                            
                            <div id="checkout-warning" class="alert alert-warning mt-3" style="display: none;">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <small>Vui lòng chọn ít nhất 1 sản phẩm để thanh toán</small>
                            </div>

                            <!-- Free Shipping Notice -->
                            @if (cartTotal < 299000)
                            {
                                <div class="free-shipping-notice mt-3">
                                    <div class="alert alert-info">
                                        <i class="fas fa-truck me-2"></i>
                                        Mua thêm <strong>@((299000 - cartTotal).ToString("N0"))₫</strong> để được miễn phí vận chuyển!
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="free-shipping-notice mt-3">
                                    <div class="alert alert-success">
                                        <i class="fas fa-check-circle me-2"></i>
                                        Bạn được miễn phí vận chuyển!
                                    </div>
                                </div>
                            }

                            <!-- Security Notice -->
                            <div class="security-notice mt-3">
                                <small class="text-muted">
                                    <i class="fas fa-shield-alt me-1"></i>
                                    Thông tin thanh toán được bảo mật 100%
                                </small>
                            </div>
                        </div>
                    </div>

                    <!-- Suggested Products -->
                    <div class="suggested-products mt-4">
                        <h6 class="mb-3">Có thể bạn quan tâm</h6>
                        <div class="row g-2">
                            <!-- Placeholder for suggested products -->
                            <div class="col-6">
                                <div class="card h-100">
                                    <img src="~/images/placeholder-product.jpg" class="card-img-top" alt="Sản phẩm đề xuất">
                                    <div class="card-body p-2">
                                        <small class="card-title">Áo thun basic</small>
                                        <div class="text-primary">
                                            <small><strong>299.000₫</strong></small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="card h-100">
                                    <img src="~/images/placeholder-product.jpg" class="card-img-top" alt="Sản phẩm đề xuất">
                                    <div class="card-body p-2">
                                        <small class="card-title">Quần jeans</small>
                                        <div class="text-primary">
                                            <small><strong>599.000₫</strong></small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Styles {
    <style>
        .cart-item {
            padding: 1rem 0;
        }
        
        .product-image img {
            max-height: 80px;
            object-fit: cover;
        }
        
        .product-name {
            max-width: 100%;
            overflow: hidden;
        }
        
        .product-name a {
            color: #333;
            font-weight: 500;
            display: block;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            max-width: 100%;
        }
        
        .product-name a:hover {
            color: var(--jh-red);
        }
        
        .quantity-actions-wrapper {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .quantity-input {
            width: 60px;
            text-align: center;
            padding: 0.25rem;
        }
        
        .cart-summary {
            position: sticky;
            top: 2rem;
        }
        
        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }
        
        .total-row {
            font-size: 1.1rem;
        }
        
        /* Coupon styles */
        .coupon-section {
            padding: 1rem 0;
        }
        
        .coupon-section .input-group {
            margin-bottom: 0.5rem;
        }
        
        .applied-coupon .alert {
            margin-bottom: 0;
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
        }
        
        .discount-row {
            color: #28a745;
            font-weight: 500;
        }
        
        .discount-amount {
            color: #28a745 !important;
        }
        
        .alert-sm {
            padding: 0.5rem 0.75rem;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
        }
        
        #couponCode {
            border-radius: 0.375rem 0 0 0.375rem;
        }
        
        .coupon-section .btn {
            border-radius: 0 0.375rem 0.375rem 0;
        }
        
        .cart-divider {
            margin: 1rem 0;
            opacity: 0.3;
        }
        
        .empty-cart-icon i {
            opacity: 0.3;
        }
        
        @@media (max-width: 768px) {
            .quantity-actions-wrapper {
                flex-direction: row;
                margin-top: 1rem;
            }
            
            .quantity-controls {
                justify-content: flex-start;
                flex-wrap: nowrap;
            }
            
            .cart-summary {
                position: static;
                margin-top: 2rem;
            }
        }
    </style>
}

@section Scripts {
    <script>
        // ============================================
        // CHECKBOX SELECTION FUNCTIONALITY
        // ============================================
        
        // Select all checkbox handler
        document.getElementById('select-all-items')?.addEventListener('change', function() {
            const checkboxes = document.querySelectorAll('.item-checkbox');
            checkboxes.forEach(cb => {
                cb.checked = this.checked;
            });
            updateSelectedSummary();
        });
        
        // Individual checkbox handler
        document.querySelectorAll('.item-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updateSelectedSummary);
        });
        
        // Update selected items summary and totals
        function updateSelectedSummary() {
            const checkboxes = document.querySelectorAll('.item-checkbox:checked');
            const selectedCount = checkboxes.length;
            const totalItems = document.querySelectorAll('.item-checkbox').length;
            
            // Update selected count display
            document.getElementById('selected-count').textContent = selectedCount;
            document.getElementById('summary-count').textContent = selectedCount;
            
            // Calculate selected subtotal
            let selectedSubtotal = 0;
            checkboxes.forEach(cb => {
                selectedSubtotal += parseFloat(cb.dataset.price);
            });
            
            // Update summary
            document.querySelector('.cart-subtotal').textContent = selectedSubtotal.toLocaleString() + '₫';
            
            // Calculate total with shipping
            const shippingFee = 30000;
            const selectedTotal = selectedSubtotal + shippingFee;
            document.querySelector('.cart-total').textContent = selectedTotal.toLocaleString() + '₫';
            
            // Update "select all" checkbox state
            const selectAll = document.getElementById('select-all-items');
            if (selectAll) {
                selectAll.checked = selectedCount === totalItems && selectedCount > 0;
                selectAll.indeterminate = selectedCount > 0 && selectedCount < totalItems;
            }
            
            // Enable/disable checkout button
            const checkoutBtn = document.getElementById('checkout-btn');
            const checkoutWarning = document.getElementById('checkout-warning');
            
            if (selectedCount === 0) {
                checkoutBtn.classList.add('disabled');
                checkoutBtn.setAttribute('aria-disabled', 'true');
                checkoutWarning.style.display = 'block';
            } else {
                checkoutBtn.classList.remove('disabled');
                checkoutBtn.removeAttribute('aria-disabled');
                checkoutWarning.style.display = 'none';
            }
            
            // Update free shipping notice
            updateFreeShippingNotice(selectedSubtotal);
        }
        
        // Update free shipping notice based on selected total
        function updateFreeShippingNotice(subtotal) {
            const freeShippingThreshold = 299000;
            const noticeDiv = document.querySelector('.free-shipping-notice');
            
            if (!noticeDiv) return;
            
            if (subtotal < freeShippingThreshold && subtotal > 0) {
                const remaining = freeShippingThreshold - subtotal;
                noticeDiv.innerHTML = `
                    <div class="alert alert-info">
                        <i class="fas fa-truck me-2"></i>
                        Mua thêm <strong>${remaining.toLocaleString()}₫</strong> để được miễn phí vận chuyển!
                    </div>
                `;
            } else if (subtotal >= freeShippingThreshold) {
                noticeDiv.innerHTML = `
                    <div class="alert alert-success">
                        <i class="fas fa-check-circle me-2"></i>
                        Bạn được miễn phí vận chuyển!
                    </div>
                `;
            } else {
                noticeDiv.innerHTML = '';
            }
        }
        
        // Checkout button click handler
        document.getElementById('checkout-btn')?.addEventListener('click', async function(e) {
            e.preventDefault();
            
            const selectedIds = Array.from(document.querySelectorAll('.item-checkbox:checked'))
                .map(cb => cb.dataset.cartItemId);
            
            if (selectedIds.length === 0) {
                showToast('Vui lòng chọn ít nhất 1 sản phẩm để thanh toán', 'error');
                return;
            }
            
            try {
                // Save selected items to session
                const response = await fetch('/Cart/SaveSelectedItems', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(selectedIds)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Redirect to checkout form directly
                    window.location.href = '/Checkout';
                } else {
                    showToast(result.message || 'Có lỗi xảy ra', 'error');
                }
            } catch (error) {
                console.error('Error saving selected items:', error);
                showToast('Có lỗi xảy ra khi lưu danh sách sản phẩm', 'error');
            }
        });
        
        // Auto-select all items on page load
        window.addEventListener('DOMContentLoaded', function() {
            const selectAll = document.getElementById('select-all-items');
            if (selectAll) {
                selectAll.checked = true;
                selectAll.dispatchEvent(new Event('change'));
            }
        });
        
        // ============================================
        // EXISTING CART FUNCTIONS
        // ============================================
        
        // Update quantity function
        async function updateQuantity(cartItemId, quantity) {
            if (quantity < 1) return;
            
            try {
                const response = await fetch('/Cart/UpdateQuantity', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ cartItemId: cartItemId, quantity: parseInt(quantity) })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Update item quantity input
                    const cartItem = document.querySelector(`[data-cart-item-id="${cartItemId}"]`);
                    cartItem.querySelector('.quantity-input').value = quantity;
                    
                    // Update item total
                    cartItem.querySelector('.total-price').textContent = result.itemTotal.toLocaleString() + '₫';
                    
                    // Update cart summary
                    document.querySelector('.cart-subtotal').textContent = result.cartTotal.toLocaleString() + '₫';
                    document.querySelector('.cart-total').textContent = (result.cartTotal + 30000).toLocaleString() + '₫';
                    
                    // Update cart count in header
                    updateCartCount(result.cartCount);
                    
                    // Re-calculate selected items total
                    const checkbox = document.querySelector(`[data-cart-item-id="${cartItemId}"].item-checkbox`);
                    if (checkbox) {
                        checkbox.dataset.price = result.itemTotal;
                        updateSelectedSummary();
                    }
                    
                    showToast(result.message, 'success');
                } else {
                    showToast(result.message, 'error');
                }
            } catch (error) {
                console.error('Error updating quantity:', error);
                showToast('Có lỗi xảy ra khi cập nhật số lượng.', 'error');
            }
        }
        
        // Remove item function
        async function removeItem(cartItemId) {
            if (!confirm('Bạn có chắc muốn xóa sản phẩm này khỏi giỏ hàng?')) {
                return;
            }
            
            try {
                const response = await fetch('/Cart/RemoveItem', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(cartItemId)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Remove item from DOM
                    const cartItem = document.querySelector(`[data-cart-item-id="${cartItemId}"]`);
                    cartItem.remove();
                    
                    // Update cart summary
                    if (result.cartCount > 0) {
                        document.querySelector('.cart-subtotal').textContent = result.cartTotal.toLocaleString() + '₫';
                        document.querySelector('.cart-total').textContent = (result.cartTotal + 30000).toLocaleString() + '₫';
                    } else {
                        // Reload page if cart is empty
                        location.reload();
                    }
                    
                    // Update cart count in header
                    updateCartCount(result.cartCount);
                    
                    // Re-calculate selected items total
                    updateSelectedSummary();
                    
                    showToast(result.message, 'success');
                } else {
                    showToast(result.message, 'error');
                }
            } catch (error) {
                console.error('Error removing item:', error);
                showToast('Có lỗi xảy ra khi xóa sản phẩm.', 'error');
            }
        }
        
        // Clear cart function
        async function clearCart() {
            if (!confirm('Bạn có chắc muốn xóa tất cả sản phẩm trong giỏ hàng?')) {
                return;
            }
            
            try {
                const response = await fetch('/Cart/ClearCart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    location.reload();
                } else {
                    showToast(result.message, 'error');
                }
            } catch (error) {
                console.error('Error clearing cart:', error);
                showToast('Có lỗi xảy ra khi xóa giỏ hàng.', 'error');
            }
        }
        
        // Coupon functions
        let appliedCouponData = null;
        
        async function applyCoupon() {
            const couponCode = document.getElementById('couponCode').value.trim();
            const messageDiv = document.getElementById('couponMessage');
            
            if (!couponCode) {
                showCouponMessage('Vui lòng nhập mã giảm giá', 'error');
                return;
            }
            
            try {
                const response = await fetch('/Coupon/Apply', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: `couponCode=${encodeURIComponent(couponCode)}`
                });
                
                const result = await response.json();
                
                if (result.success) {
                    appliedCouponData = result.coupon;
                    showAppliedCoupon(result.coupon);
                    calculateDiscount();
                    showCouponMessage(result.message, 'success');
                    document.getElementById('couponCode').value = '';
                } else {
                    showCouponMessage(result.message, 'error');
                }
            } catch (error) {
                console.error('Error applying coupon:', error);
                showCouponMessage('Có lỗi xảy ra khi áp dụng mã giảm giá', 'error');
            }
        }
        
        function removeCoupon() {
            appliedCouponData = null;
            document.getElementById('appliedCoupon').style.display = 'none';
            document.getElementById('discountRow').style.display = 'none';
            document.getElementById('couponMessage').innerHTML = '';
            updateCartTotal();
        }
        
        function showAppliedCoupon(coupon) {
            const appliedDiv = document.getElementById('appliedCoupon');
            const couponInfo = document.getElementById('couponInfo');
            
            let discountText = '';
            if (coupon.type === 'percentage') {
                discountText = `${coupon.value}%`;
            } else {
                discountText = `${coupon.value.toLocaleString()}₫`;
            }
            
            couponInfo.textContent = `Mã ${coupon.code} - Giảm ${discountText}`;
            appliedDiv.style.display = 'block';
        }
        
        function calculateDiscount() {
            if (!appliedCouponData) return;
            
            const subtotalText = document.querySelector('.cart-subtotal').textContent;
            const subtotal = parseFloat(subtotalText.replace(/[₫,]/g, ''));
            
            fetch('/Coupon/Calculate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `couponId=${appliedCouponData.id}&subtotal=${subtotal}`
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    showDiscount(result.discountAmount);
                    updateCartTotal(result.finalTotal);
                } else {
                    showCouponMessage(result.message, 'error');
                    removeCoupon();
                }
            })
            .catch(error => {
                console.error('Error calculating discount:', error);
                showCouponMessage('Có lỗi khi tính toán giảm giá', 'error');
            });
        }
        
        function showDiscount(amount) {
            const discountRow = document.getElementById('discountRow');
            const discountAmount = discountRow.querySelector('.discount-amount');
            
            discountAmount.textContent = `-${amount.toLocaleString()}₫`;
            discountRow.style.display = 'flex';
        }
        
        function updateCartTotal(newTotal = null) {
            const cartTotalElement = document.querySelector('.cart-total');
            
            if (newTotal !== null) {
                // Add shipping fee to the discounted total
                const finalTotal = newTotal + 30000;
                cartTotalElement.textContent = finalTotal.toLocaleString() + '₫';
            } else {
                // Reset to original total
                const subtotalText = document.querySelector('.cart-subtotal').textContent;
                const subtotal = parseFloat(subtotalText.replace(/[₫,]/g, ''));
                const finalTotal = subtotal + 30000;
                cartTotalElement.textContent = finalTotal.toLocaleString() + '₫';
            }
        }
        
        function showCouponMessage(message, type) {
            const messageDiv = document.getElementById('couponMessage');
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';
            
            messageDiv.innerHTML = `
                <div class="alert ${alertClass} alert-sm">
                    <i class="fas ${icon} me-2"></i>${message}
                </div>
            `;
            
            // Auto hide after 5 seconds
            setTimeout(() => {
                messageDiv.innerHTML = '';
            }, 5000);
        }
        
        // Handle Enter key in coupon input
        document.getElementById('couponCode').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                applyCoupon();
            }
        });
        
        // Utility functions
        function updateCartCount(count) {
            const cartCountElements = document.querySelectorAll('.cart-count');
            cartCountElements.forEach(element => {
                element.textContent = count;
            });
        }
        
        function showToast(message, type) {
            // Create toast element if it doesn't exist
            let toastContainer = document.getElementById('toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toast-container';
                toastContainer.className = 'position-fixed top-0 end-0 p-3';
                toastContainer.style.zIndex = '1055';
                document.body.appendChild(toastContainer);
            }
            
            const toastId = 'toast-' + Date.now();
            const toast = document.createElement('div');
            toast.id = toastId;
            toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'} border-0`;
            toast.setAttribute('role', 'alert');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            
            // Remove toast after it's hidden
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }
    </script>
}
