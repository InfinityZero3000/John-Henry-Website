#!/usr/bin/env python3
"""
Script ƒë·ªÉ ki·ªÉm tra category mapping v√† t·∫°o SQL update script
"""

import csv
import os

def read_db_export(filename):
    """ƒê·ªçc s·∫£n ph·∫©m t·ª´ database export"""
    products = []
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                products.append({
                    'sku': row['SKU'].strip(),
                    'name': row['Name'].strip(),
                    'category': row['category'].strip(),
                    'brand': row['brand'].strip()
                })
    except Exception as e:
        print(f"Error reading {filename}: {e}")
    return products

def detect_correct_category_from_sku(sku, name):
    """Ph√°t hi·ªán category ƒë√∫ng d·ª±a tr√™n SKU v√† t√™n"""
    sku_upper = sku.upper()
    name_lower = name.lower()
    
    # Women's products (FW prefix)
    if sku_upper.startswith('FW'):
        if any(x in sku_upper for x in ['BL', 'BLOUSE']):
            return '√Åo n·ªØ'
        elif any(x in sku_upper for x in ['TS', 'TSHIRT']):
            return '√Åo n·ªØ'
        elif 'KS' in sku_upper or 'polo' in name_lower:
            return '√Åo n·ªØ'
        elif 'WS' in sku_upper or 'ws' in name_lower:
            return '√Åo n·ªØ'
        elif any(x in name_lower for x in ['ƒë·∫ßm', 'dam']):
            return 'ƒê·∫ßm n·ªØ'
        elif any(x in name_lower for x in ['v√°y', 'vay', 'skirt', 'ch√¢n v√°y']):
            return 'Ch√¢n v√°y n·ªØ'
        elif any(x in name_lower for x in ['qu·∫ßn', 'quan', 'pants', 'jeans']):
            return 'Qu·∫ßn n·ªØ'
        elif 'BZ' in sku_upper or 'blazer' in name_lower or 'kho√°c' in name_lower:
            return '√Åo n·ªØ'
        elif 'JK' in sku_upper or 'jacket' in name_lower:
            return '√Åo n·ªØ'
        elif any(x in sku_upper for x in ['BE', 'BELT']) or 'th·∫Øt l∆∞ng' in name_lower or 'belt' in name_lower:
            return 'Ph·ª• ki·ªán n·ªØ'
        elif any(x in sku_upper for x in ['BA', 'BAG']) or 'balo' in name_lower or 'bag' in name_lower or 't√∫i' in name_lower:
            return 'Ph·ª• ki·ªán n·ªØ'
        elif 'SG' in sku_upper or 'm·∫Øt k√≠nh' in name_lower or 'k√≠nh' in name_lower:
            return 'Ph·ª• ki·ªán n·ªØ'
        elif 'SP' in sku_upper or 'sandal' in name_lower or 'gi√†y' in name_lower:
            return 'Ph·ª• ki·ªán n·ªØ'
        else:
            return '√Åo n·ªØ'  # Default for FW
    
    # Men's products
    elif 'WS' in sku_upper and any(x in name_lower for x in ['s∆° mi', 'so mi', 'shirt']):
        return '√Åo nam'
    elif 'KS' in sku_upper or ('polo' in name_lower and 'nam' in name_lower):
        return '√Åo nam'
    elif 'TS' in sku_upper or ('√°o thun' in name_lower and 'nam' in name_lower):
        return '√Åo nam'
    elif 'BZ' in sku_upper or 'blazer' in name_lower or 'vest' in name_lower:
        return '√Åo nam'
    elif 'JK' in sku_upper or ('kho√°c' in name_lower and 'nam' in name_lower):
        return '√Åo nam'
    elif any(x in sku_upper for x in ['DP', 'KP']) or ('qu·∫ßn' in name_lower and 'nam' in name_lower):
        return 'Qu·∫ßn nam'
    elif any(x in sku_upper for x in ['BE', 'BELT']) or 'th·∫Øt l∆∞ng' in name_lower:
        return 'Ph·ª• ki·ªán nam'
    elif any(x in sku_upper for x in ['CT', 'TIE']) or 'c√† v·∫°t' in name_lower or 'cavat' in name_lower:
        return 'Ph·ª• ki·ªán nam'
    elif 'BA' in sku_upper or 'balo' in name_lower:
        return 'Ph·ª• ki·ªán nam'
    elif 'WT' in sku_upper or '√°o gi√≥' in name_lower or 'windbreaker' in name_lower:
        return '√Åo nam'
    
    # Default fallback
    if 'nam' in name_lower:
        return '√Åo nam'
    elif 'n·ªØ' in name_lower or 'nu' in name_lower:
        return '√Åo n·ªØ'
    
    return None

def main():
    print("=" * 80)
    print("KI·ªÇM TRA V√Ä FIX CATEGORY MAPPING")
    print("=" * 80)
    print()
    
    db_export_path = '/Users/nguyenhuuthang/Documents/RepoGitHub/John Henry Website/database/all_products_export.csv'
    
    print("üìÑ ƒê·ªçc database export...")
    products = read_db_export(db_export_path)
    print(f"   ‚úì ƒê·ªçc ƒë∆∞·ª£c {len(products)} s·∫£n ph·∫©m")
    print()
    
    # Ph√¢n t√≠ch category hi·ªán t·∫°i
    print("üìä PH√ÇN T√çCH CATEGORY HI·ªÜN T·∫†I:")
    print("-" * 80)
    category_count = {}
    for product in products:
        cat = product['category']
        category_count[cat] = category_count.get(cat, 0) + 1
    
    for cat, count in sorted(category_count.items()):
        print(f"   {cat}: {count} s·∫£n ph·∫©m")
    print()
    
    # T√¨m s·∫£n ph·∫©m c√≥ category sai
    print("üîç KI·ªÇM TRA CATEGORY MAPPING:")
    print("-" * 80)
    
    mismatched = []
    for product in products:
        current_cat = product['category']
        correct_cat = detect_correct_category_from_sku(product['sku'], product['name'])
        
        if correct_cat and current_cat != correct_cat:
            mismatched.append({
                'sku': product['sku'],
                'name': product['name'],
                'current': current_cat,
                'correct': correct_cat
            })
    
    if not mismatched:
        print("‚úÖ T·∫•t c·∫£ s·∫£n ph·∫©m ƒë√£ c√≥ category ƒë√∫ng!")
        return
    
    print(f"‚ö†Ô∏è  T√¨m th·∫•y {len(mismatched)} s·∫£n ph·∫©m c√≥ category sai:")
    print()
    
    # Group by correction needed
    corrections = {}
    for item in mismatched:
        key = (item['current'], item['correct'])
        if key not in corrections:
            corrections[key] = []
        corrections[key].append(item)
    
    for (current, correct), items in corrections.items():
        print(f"   {current} ‚Üí {correct}: {len(items)} s·∫£n ph·∫©m")
        for item in items[:3]:
            print(f"      - {item['sku']}: {item['name'][:50]}")
        if len(items) > 3:
            print(f"      ... v√† {len(items) - 3} s·∫£n ph·∫©m kh√°c")
        print()
    
    # T·∫°o SQL script
    output_file = '/Users/nguyenhuuthang/Documents/RepoGitHub/John Henry Website/database/fix_category_mapping.sql'
    
    print(f"üìù T·∫°o SQL script: {output_file}")
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("-- SQL Script to fix category mapping\n")
        f.write("-- Auto-generated\n")
        f.write(f"-- Total products to update: {len(mismatched)}\n")
        f.write("\n")
        f.write("DO $$\n")
        f.write("DECLARE\n")
        
        # Collect all categories needed
        categories_needed = set()
        for item in mismatched:
            categories_needed.add(item['correct'])
        
        for cat_name in sorted(categories_needed):
            var_name = cat_name.lower().replace(' ', '_')
            var_name = var_name.replace('√°', 'a').replace('ƒÉ', 'a').replace('√¢', 'a')
            var_name = var_name.replace('ƒë', 'd')
            var_name = var_name.replace('√©', 'e').replace('√™', 'e')
            var_name = var_name.replace('√≠', 'i')
            var_name = var_name.replace('√≥', 'o').replace('√¥', 'o').replace('∆°', 'o')
            var_name = var_name.replace('√∫', 'u').replace('∆∞', 'u')
            var_name = var_name.replace('√Ω', 'y')
            f.write(f"    v_{var_name}_id UUID;\n")
        
        f.write("BEGIN\n")
        f.write("    -- Get Category IDs\n")
        
        for cat_name in sorted(categories_needed):
            var_name = cat_name.lower().replace(' ', '_')
            var_name = var_name.replace('√°', 'a').replace('ƒÉ', 'a').replace('√¢', 'a')
            var_name = var_name.replace('ƒë', 'd')
            var_name = var_name.replace('√©', 'e').replace('√™', 'e')
            var_name = var_name.replace('√≠', 'i')
            var_name = var_name.replace('√≥', 'o').replace('√¥', 'o').replace('∆°', 'o')
            var_name = var_name.replace('√∫', 'u').replace('∆∞', 'u')
            var_name = var_name.replace('√Ω', 'y')
            f.write(f'    SELECT "Id" INTO v_{var_name}_id FROM "Categories" WHERE "Name" = \'{cat_name}\' LIMIT 1;\n')
        
        f.write("\n")
        f.write("    -- Update product categories\n")
        
        # Group updates by category change
        for (current, correct), items in sorted(corrections.items()):
            var_name = correct.lower().replace(' ', '_')
            var_name = var_name.replace('√°', 'a').replace('ƒÉ', 'a').replace('√¢', 'a')
            var_name = var_name.replace('ƒë', 'd')
            var_name = var_name.replace('√©', 'e').replace('√™', 'e')
            var_name = var_name.replace('√≠', 'i')
            var_name = var_name.replace('√≥', 'o').replace('√¥', 'o').replace('∆°', 'o')
            var_name = var_name.replace('√∫', 'u').replace('∆∞', 'u')
            var_name = var_name.replace('√Ω', 'y')
            
            f.write(f"\n    -- Update: {current} ‚Üí {correct} ({len(items)} products)\n")
            f.write(f'    UPDATE "Products"\n')
            f.write(f'    SET "CategoryId" = v_{var_name}_id, "UpdatedAt" = NOW()\n')
            f.write(f'    WHERE "SKU" IN (\n')
            
            for i, item in enumerate(items):
                f.write(f"        '{item['sku']}'")
                if i < len(items) - 1:
                    f.write(",\n")
                else:
                    f.write("\n")
            
            f.write(f'    );\n')
            f.write(f'    RAISE NOTICE \'Updated % products from {current} to {correct}\', ROW_COUNT;\n')
        
        f.write("\n")
        f.write("    RAISE NOTICE 'Category mapping fix completed!';\n")
        f.write("END $$;\n")
        f.write("\n")
        f.write("-- Verify updates\n")
        f.write('SELECT c."Name" as category, COUNT(*) as product_count\n')
        f.write('FROM "Products" p\n')
        f.write('JOIN "Categories" c ON p."CategoryId" = c."Id"\n')
        f.write('GROUP BY c."Name"\n')
        f.write('ORDER BY c."Name";\n')
    
    print(f"‚úÖ SQL script ƒë√£ ƒë∆∞·ª£c t·∫°o!")
    print(f"   File: {output_file}")
    print()
    print("üìù ƒê·ªÉ √°p d·ª•ng fix, ch·∫°y l·ªánh:")
    print(f"   psql -U johnhenry -d johnhenry -f {output_file}")
    print()

if __name__ == "__main__":
    main()
