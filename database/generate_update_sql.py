#!/usr/bin/env python3
"""
Script t·ª± ƒë·ªông t·∫°o SQL UPDATE statements t·ª´ file CSV
Gi√∫p c·∫≠p nh·∫≠t gi√° s·∫£n ph·∫©m m·ªôt c√°ch t·ª± ƒë·ªông

Usage:
    python generate_update_sql.py
    python generate_update_sql.py --input custom_prices.csv --output custom_update.sql
"""

import csv
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict

def read_csv(file_path: str) -> List[Dict[str, str]]:
    """ƒê·ªçc file CSV v√† tr·∫£ v·ªÅ list of dictionaries"""
    products = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                products.append(row)
        
        print(f"‚úÖ ƒê√£ ƒë·ªçc {len(products)} s·∫£n ph·∫©m t·ª´ {file_path}")
        return products
    except FileNotFoundError:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {file_path}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file: {e}")
        sys.exit(1)

def categorize_products(products: List[Dict[str, str]]) -> Dict[str, List[Dict[str, str]]]:
    """Ph√¢n lo·∫°i s·∫£n ph·∫©m theo category"""
    categories = {
        '√Åo Kho√°c Nam': [],
        '√Åo Len Nam': [],
        '√Åo Polo Nam': [],
        '√Åo Polo N·ªØ': [],
        '√Åo S∆° Mi Nam': [],
        '√Åo S∆° Mi N·ªØ': [],
        '√Åo Thun Nam': [],
        '√Åo Thun N·ªØ': [],
        '√Åo Blouse N·ªØ': [],
        'Ch√¢n V√°y': [],
        'ƒê·∫ßm N·ªØ': [],
        'Qu·∫ßn T√¢y Nam': [],
        'Qu·∫ßn T√¢y N·ªØ': [],
        'Qu·∫ßn Jeans Nam': [],
        'Qu·∫ßn Jeans N·ªØ': [],
        'Qu·∫ßn Khaki Nam': [],
        'Qu·∫ßn Short Nam': [],
        'Qu·∫ßn Short N·ªØ': [],
        'Th·∫Øt L∆∞ng Nam': [],
        'Th·∫Øt L∆∞ng N·ªØ': [],
        'V√≠ Nam': [],
        'Gi√†y D√©p Nam': [],
        'M≈© Nam': [],
        'T√∫i X√°ch N·ªØ': [],
        'M·∫Øt K√≠nh N·ªØ': []
    }
    
    for product in products:
        name = product['DB_Name']
        
        # Ph√¢n lo·∫°i d·ª±a v√†o t√™n s·∫£n ph·∫©m
        if '√Åo Kho√°c' in name and 'FW' not in product['SKU']:
            categories['√Åo Kho√°c Nam'].append(product)
        elif '√Åo Len' in name:
            categories['√Åo Len Nam'].append(product)
        elif 'Polo' in name and 'FW' not in product['SKU']:
            categories['√Åo Polo Nam'].append(product)
        elif 'Polo' in name and 'FW' in product['SKU']:
            categories['√Åo Polo N·ªØ'].append(product)
        elif 'S∆° Mi' in name and 'FW' not in product['SKU']:
            categories['√Åo S∆° Mi Nam'].append(product)
        elif ('S∆° Mi' in name or 'Blouse' not in name) and 'FW' in product['SKU'] and 'WS' in product['SKU']:
            categories['√Åo S∆° Mi N·ªØ'].append(product)
        elif 'Blouse' in name:
            categories['√Åo Blouse N·ªØ'].append(product)
        elif '√Åo Thun' in name and 'FW' not in product['SKU']:
            categories['√Åo Thun Nam'].append(product)
        elif ('√Åo Thun' in name or 'Tanktop' in name) and 'FW' in product['SKU']:
            categories['√Åo Thun N·ªØ'].append(product)
        elif 'Ch√¢n V√°y' in name or 'Mini Skirt' in name or 'V√°y' in name and 'ƒê·∫ßm' not in name:
            categories['Ch√¢n V√°y'].append(product)
        elif 'ƒê·∫ßm' in name:
            categories['ƒê·∫ßm N·ªØ'].append(product)
        elif 'Qu·∫ßn T√¢y' in name and 'FW' not in product['SKU']:
            categories['Qu·∫ßn T√¢y Nam'].append(product)
        elif 'Qu·∫ßn T√¢y' in name and 'FW' in product['SKU']:
            categories['Qu·∫ßn T√¢y N·ªØ'].append(product)
        elif 'Jeans' in name and 'FW' not in product['SKU']:
            categories['Qu·∫ßn Jeans Nam'].append(product)
        elif 'Jeans' in name and 'FW' in product['SKU']:
            categories['Qu·∫ßn Jeans N·ªØ'].append(product)
        elif 'Khaki' in name or 'Jogger' in name:
            categories['Qu·∫ßn Khaki Nam'].append(product)
        elif 'Short' in name and 'FW' not in product['SKU']:
            categories['Qu·∫ßn Short Nam'].append(product)
        elif 'Short' in name and 'FW' in product['SKU']:
            categories['Qu·∫ßn Short N·ªØ'].append(product)
        elif 'Th·∫Øt L∆∞ng' in name and 'FW' not in product['SKU']:
            categories['Th·∫Øt L∆∞ng Nam'].append(product)
        elif 'Th·∫Øt L∆∞ng' in name and 'FW' in product['SKU']:
            categories['Th·∫Øt L∆∞ng N·ªØ'].append(product)
        elif 'V√≠' in name:
            categories['V√≠ Nam'].append(product)
        elif 'D√©p' in name or 'Gi√†y' in name:
            categories['Gi√†y D√©p Nam'].append(product)
        elif 'M≈©' in name:
            categories['M≈© Nam'].append(product)
        elif 'T√∫i' in name:
            categories['T√∫i X√°ch N·ªØ'].append(product)
        elif 'M·∫Øt K√≠nh' in name:
            categories['M·∫Øt K√≠nh N·ªØ'].append(product)
    
    # Lo·∫°i b·ªè categories r·ªóng
    return {k: v for k, v in categories.items() if v}

def generate_sql(products: List[Dict[str, str]], output_file: str):
    """Generate SQL UPDATE statements"""
    
    # Ph√¢n lo·∫°i s·∫£n ph·∫©m
    categorized = categorize_products(products)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        # Header
        f.write("-- " + "="*53 + "\n")
        f.write(f"-- C·∫¨P NH·∫¨T GI√Å S·∫¢N PH·∫®M - Generated {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write("-- " + "="*53 + "\n")
        f.write(f"-- T·ªïng s·ªë: {len(products)} s·∫£n ph·∫©m\n")
        f.write("-- " + "="*53 + "\n\n")
        
        f.write("BEGIN TRANSACTION;\n\n")
        f.write("PRINT 'B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t gi√° s·∫£n ph·∫©m...';\n\n")
        
        total_count = 0
        
        # Generate UPDATE cho t·ª´ng category
        for category, items in categorized.items():
            if not items:
                continue
                
            f.write(f"-- {category} ({len(items)} s·∫£n ph·∫©m)\n")
            
            for product in items:
                db_name = product['DB_Name']
                old_price = float(product['Old_Price'])
                new_price = float(product['New_Price'])
                
                # Format gi√° (lo·∫°i b·ªè ph·∫ßn th·∫≠p ph√¢n n·∫øu l√† .0)
                old_price_str = f"{int(old_price)}" if old_price.is_integer() else f"{old_price}"
                new_price_str = f"{int(new_price)}" if new_price.is_integer() else f"{new_price}"
                
                sql = f"UPDATE Products SET Price = {new_price_str} WHERE Name = '{db_name}' AND Price = {old_price_str};\n"
                f.write(sql)
                total_count += 1
            
            f.write("\n")
        
        # Footer
        f.write("-- Ki·ªÉm tra s·ªë l∆∞·ª£ng c·∫≠p nh·∫≠t\n")
        f.write("DECLARE @UpdatedCount INT;\n")
        f.write("SELECT @UpdatedCount = @@ROWCOUNT;\n\n")
        f.write("PRINT '----------------------------------------';\n")
        f.write("PRINT 'S·ªë s·∫£n ph·∫©m ƒë√£ c·∫≠p nh·∫≠t: ' + CAST(@UpdatedCount AS VARCHAR(10));\n")
        f.write("PRINT '----------------------------------------';\n\n")
        
        # Query ki·ªÉm tra
        f.write("-- Xem tr∆∞·ªõc k·∫øt qu·∫£\n")
        f.write("SELECT TOP 20\n")
        f.write("    p.Name,\n")
        f.write("    c.Name AS Category,\n")
        f.write("    p.Price,\n")
        f.write("    p.SalePrice,\n")
        f.write("    p.UpdatedAt\n")
        f.write("FROM Products p\n")
        f.write("INNER JOIN Categories c ON p.CategoryId = c.Id\n")
        f.write("WHERE p.UpdatedAt >= DATEADD(MINUTE, -5, GETDATE())\n")
        f.write("    AND p.IsActive = 1\n")
        f.write("ORDER BY p.UpdatedAt DESC;\n\n")
        
        # Statistics
        f.write("-- Th·ªëng k√™ gi√° theo danh m·ª•c\n")
        f.write("SELECT \n")
        f.write("    c.Name AS 'Danh m·ª•c',\n")
        f.write("    COUNT(*) AS 'S·ªë s·∫£n ph·∫©m',\n")
        f.write("    MIN(p.Price) AS 'Gi√° th·∫•p nh·∫•t',\n")
        f.write("    MAX(p.Price) AS 'Gi√° cao nh·∫•t',\n")
        f.write("    AVG(p.Price) AS 'Gi√° trung b√¨nh'\n")
        f.write("FROM Products p\n")
        f.write("INNER JOIN Categories c ON p.CategoryId = c.Id\n")
        f.write("WHERE p.IsActive = 1\n")
        f.write("GROUP BY c.Name\n")
        f.write("ORDER BY c.Name;\n\n")
        
        f.write("COMMIT TRANSACTION;\n")
        f.write("PRINT '';\n")
        f.write("PRINT '‚úÖ C·∫¨P NH·∫¨T TH√ÄNH C√îNG!';\n")
        f.write(f"PRINT '‚úÖ T·ªïng c·ªông: {total_count} s·∫£n ph·∫©m';\n")
    
    print(f"‚úÖ ƒê√£ t·∫°o SQL script: {output_file}")
    print(f"   - T·ªïng s·ªë UPDATE statements: {total_count}")
    print(f"   - S·ªë categories: {len(categorized)}")

def main():
    """Main function"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Generate SQL UPDATE t·ª´ CSV')
    parser.add_argument('--input', '-i', 
                       default='database/matched_products.csv',
                       help='ƒê∆∞·ªùng d·∫´n file CSV input')
    parser.add_argument('--output', '-o',
                       default='database/update_prices_generated.sql',
                       help='ƒê∆∞·ªùng d·∫´n file SQL output')
    
    args = parser.parse_args()
    
    print("üöÄ B·∫Øt ƒë·∫ßu generate SQL script...")
    print(f"   Input: {args.input}")
    print(f"   Output: {args.output}")
    print()
    
    # ƒê·ªçc CSV
    products = read_csv(args.input)
    
    # Generate SQL
    generate_sql(products, args.output)
    
    print()
    print("‚úÖ HO√ÄN TH√ÄNH!")
    print()
    print("üìù C√°c b∆∞·ªõc ti·∫øp theo:")
    print(f"   1. Ki·ªÉm tra file: {args.output}")
    print("   2. Ch·∫°y script trong SQL Server Management Studio")
    print("   3. Ho·∫∑c: sqlcmd -S SERVER -d DB -i " + args.output)
    print()

if __name__ == '__main__':
    main()
