#!/usr/bin/env python3
"""
Script ƒë·ªÉ ki·ªÉm tra v√† import s·∫£n ph·∫©m c√≤n thi·∫øu v√†o database
"""

import csv
import os
import psycopg2
from datetime import datetime
import sys

# Th√¥ng tin k·∫øt n·ªëi database
DB_CONFIG = {
    'host': 'localhost',
    'port': '5432',
    'database': 'johnhenry',
    'user': 'johnhenry',
    'password': 'johnhenry123'
}

def connect_db():
    """K·∫øt n·ªëi ƒë·∫øn database PostgreSQL"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        return conn
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database: {e}")
        sys.exit(1)

def get_category_mapping(conn):
    """L·∫•y mapping t·ª´ t√™n th∆∞ m·ª•c ·∫£nh sang category ID"""
    cursor = conn.cursor()
    
    # T·∫°o mapping t·ª´ folder name sang category
    folder_to_category = {
        'ao-nam': '√Åo nam',
        'ao-nu': '√Åo n·ªØ', 
        'quan-nam': 'Qu·∫ßn nam',
        'quan-nu': 'Qu·∫ßn n·ªØ',
        'chan-vay-nu': 'Ch√¢n v√°y n·ªØ',
        'dam-nu': 'ƒê·∫ßm n·ªØ',
        'phu-kien-nam': 'Ph·ª• ki·ªán nam',
        'phu-kien-nu': 'Ph·ª• ki·ªán n·ªØ'
    }
    
    category_map = {}
    for folder, cat_name in folder_to_category.items():
        cursor.execute("""
            SELECT "Id", "Name" FROM "Categories" 
            WHERE LOWER("Name") LIKE %s OR "Slug" LIKE %s
            LIMIT 1
        """, (f'%{cat_name.lower()}%', f'%{folder}%'))
        result = cursor.fetchone()
        if result:
            category_map[folder] = result[0]
            print(f"‚úì Mapping: {folder} -> {cat_name} (ID: {result[0]})")
    
    cursor.close()
    return category_map, folder_to_category

def get_brand_id(conn, brand_name='John Henry'):
    """L·∫•y brand ID"""
    cursor = conn.cursor()
    cursor.execute('SELECT "Id" FROM "Brands" WHERE "Name" = %s LIMIT 1', (brand_name,))
    result = cursor.fetchone()
    cursor.close()
    
    if result:
        print(f"‚úì Brand '{brand_name}' ID: {result[0]}")
        return result[0]
    else:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y brand '{brand_name}'")
        return None

def get_existing_skus(conn):
    """L·∫•y danh s√°ch SKU ƒë√£ c√≥ trong database"""
    cursor = conn.cursor()
    cursor.execute('SELECT "SKU" FROM "Products"')
    existing_skus = set(row[0] for row in cursor.fetchall())
    cursor.close()
    print(f"‚úì Database hi·ªán c√≥ {len(existing_skus)} s·∫£n ph·∫©m")
    return existing_skus

def scan_product_images(base_path='/Users/nguyenhuuthang/Documents/RepoGitHub/John Henry Website/wwwroot/images'):
    """Scan c√°c th∆∞ m·ª•c ·∫£nh v√† l·∫•y th√¥ng tin SKU"""
    folders = ['ao-nam', 'ao-nu', 'quan-nam', 'quan-nu', 'chan-vay-nu', 'dam-nu', 'phu-kien-nam', 'phu-kien-nu']
    image_products = {}
    
    for folder in folders:
        folder_path = os.path.join(base_path, folder)
        if not os.path.exists(folder_path):
            print(f"‚ö†Ô∏è  Folder kh√¥ng t·ªìn t·∫°i: {folder_path}")
            continue
        
        files = [f for f in os.listdir(folder_path) 
                if f.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp'))]
        
        print(f"‚úì {folder}: {len(files)} ·∫£nh")
        
        for file in files:
            # Extract SKU from filename (assuming format: SKU.jpg ho·∫∑c SKU-1.jpg)
            sku = file.split('.')[0].split('-')[0] if '-' in file else file.split('.')[0]
            sku = sku.upper()
            
            if sku not in image_products:
                image_products[sku] = {
                    'folder': folder,
                    'images': []
                }
            image_products[sku]['images'].append(file)
    
    return image_products

def read_csv_products(csv_path):
    """ƒê·ªçc d·ªØ li·ªáu t·ª´ CSV file"""
    products = {}
    
    if not os.path.exists(csv_path):
        print(f"‚ùå File CSV kh√¥ng t·ªìn t·∫°i: {csv_path}")
        return products
    
    with open(csv_path, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            sku = row['sku'].strip().upper()
            products[sku] = {
                'name': row['name'].strip(),
                'price': float(row['price'].replace(',', ''))
            }
    
    print(f"‚úì CSV file c√≥ {len(products)} s·∫£n ph·∫©m")
    return products

def import_missing_products(conn, csv_products, image_products, category_map, folder_to_category, brand_id):
    """Import c√°c s·∫£n ph·∫©m c√≤n thi·∫øu"""
    existing_skus = get_existing_skus(conn)
    cursor = conn.cursor()
    
    imported = 0
    skipped = 0
    errors = 0
    
    # Default category n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c
    cursor.execute('SELECT "Id" FROM "Categories" LIMIT 1')
    default_category_id = cursor.fetchone()[0]
    
    for sku, product_info in csv_products.items():
        if sku in existing_skus:
            skipped += 1
            continue
        
        # T√¨m category d·ª±a tr√™n image folder
        category_id = default_category_id
        featured_image = None
        
        if sku in image_products:
            folder = image_products[sku]['folder']
            category_id = category_map.get(folder, default_category_id)
            if image_products[sku]['images']:
                featured_image = f"~/images/{folder}/{image_products[sku]['images'][0]}"
        
        try:
            # Generate slug
            slug = product_info['name'].lower().replace(' ', '-')
            slug = ''.join(c for c in slug if c.isalnum() or c == '-')
            
            now = datetime.utcnow()
            
            cursor.execute("""
                INSERT INTO "Products" 
                ("Id", "Name", "Slug", "SKU", "Price", "StockQuantity", "InStock", 
                 "IsFeatured", "IsActive", "Rating", "ReviewCount", "CategoryId", "BrandId",
                 "FeaturedImageUrl", "CreatedAt", "UpdatedAt", "Status", "ManageStock")
                VALUES 
                (gen_random_uuid(), %s, %s, %s, %s, 100, true, false, true, 0, 0, %s, %s, %s, %s, %s, 'active', true)
            """, (
                product_info['name'],
                slug,
                sku,
                product_info['price'],
                category_id,
                brand_id,
                featured_image,
                now,
                now
            ))
            
            imported += 1
            print(f"‚úì Imported: {sku} - {product_info['name']}")
            
        except Exception as e:
            errors += 1
            print(f"‚ùå Error importing {sku}: {e}")
    
    conn.commit()
    cursor.close()
    
    return imported, skipped, errors

def main():
    print("=" * 80)
    print("KI·ªÇM TRA V√Ä IMPORT S·∫¢N PH·∫®M V√ÄO DATABASE")
    print("=" * 80)
    print()
    
    # 1. Ki·ªÉm tra s·ªë ·∫£nh trong c√°c folder
    print("üìÅ KI·ªÇM TRA ·∫¢NH S·∫¢N PH·∫®M:")
    print("-" * 80)
    image_products = scan_product_images()
    print(f"\n‚úì T·ªïng s·ªë SKU t·ª´ ·∫£nh: {len(image_products)}")
    print()
    
    # 2. ƒê·ªçc CSV files
    print("üìÑ KI·ªÇM TRA D·ªÆ LI·ªÜU CSV:")
    print("-" * 80)
    csv_path = '/Users/nguyenhuuthang/Documents/RepoGitHub/John Henry Website/database/johnhenry_products.csv'
    csv_products = read_csv_products(csv_path)
    print()
    
    # 3. K·∫øt n·ªëi database v√† ki·ªÉm tra
    print("üóÑÔ∏è  K·∫æT N·ªêI DATABASE:")
    print("-" * 80)
    conn = connect_db()
    print("‚úì K·∫øt n·ªëi database th√†nh c√¥ng")
    
    existing_skus = get_existing_skus(conn)
    print()
    
    # 4. L·∫•y category v√† brand mapping
    print("üè∑Ô∏è  L·∫§Y TH√îNG TIN CATEGORIES V√Ä BRANDS:")
    print("-" * 80)
    category_map, folder_to_category = get_category_mapping(conn)
    brand_id = get_brand_id(conn)
    print()
    
    # 5. T√¨m s·∫£n ph·∫©m c√≤n thi·∫øu
    print("üîç PH√ÇN T√çCH D·ªÆ LI·ªÜU:")
    print("-" * 80)
    missing_skus = set(csv_products.keys()) - existing_skus
    print(f"‚úì CSV c√≥: {len(csv_products)} s·∫£n ph·∫©m")
    print(f"‚úì Database c√≥: {len(existing_skus)} s·∫£n ph·∫©m")
    print(f"‚úì C√≤n thi·∫øu: {len(missing_skus)} s·∫£n ph·∫©m")
    print()
    
    if missing_skus:
        print(f"üìù Danh s√°ch SKU c√≤n thi·∫øu (10 ƒë·∫ßu ti√™n):")
        for i, sku in enumerate(list(missing_skus)[:10]):
            print(f"  {i+1}. {sku}")
        if len(missing_skus) > 10:
            print(f"  ... v√† {len(missing_skus) - 10} SKU kh√°c")
        print()
        
        # 6. Import s·∫£n ph·∫©m
        response = input("‚ùì B·∫°n c√≥ mu·ªën import c√°c s·∫£n ph·∫©m c√≤n thi·∫øu? (y/n): ")
        if response.lower() == 'y':
            print()
            print("üì• IMPORT S·∫¢N PH·∫®M:")
            print("-" * 80)
            imported, skipped, errors = import_missing_products(
                conn, csv_products, image_products, category_map, folder_to_category, brand_id
            )
            
            print()
            print("=" * 80)
            print("K·∫æT QU·∫¢ IMPORT:")
            print(f"  ‚úì Imported: {imported} s·∫£n ph·∫©m")
            print(f"  ‚äò Skipped: {skipped} s·∫£n ph·∫©m (ƒë√£ t·ªìn t·∫°i)")
            print(f"  ‚úó Errors: {errors} s·∫£n ph·∫©m")
            print("=" * 80)
    else:
        print("‚úì Kh√¥ng c√≥ s·∫£n ph·∫©m thi·∫øu. Database ƒë√£ ƒë·∫ßy ƒë·ªß!")
    
    conn.close()
    print()
    print("‚úì Ho√†n th√†nh!")

if __name__ == "__main__":
    main()
